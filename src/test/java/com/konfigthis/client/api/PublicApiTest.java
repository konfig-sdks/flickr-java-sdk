/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.io.File;
import com.konfigthis.client.model.PublicFlickrGroupsPoolsGetContextResponse;
import com.konfigthis.client.model.PublicGetAlbumPhotosResponse;
import com.konfigthis.client.model.PublicGetFavoritePhotosResponse;
import com.konfigthis.client.model.PublicGetFavoritesContextResponse;
import com.konfigthis.client.model.PublicGetFlickrTestEchoResponse;
import com.konfigthis.client.model.PublicGetGalleryPhotosResponse;
import com.konfigthis.client.model.PublicGetGroupDiscussionTopicsResponse;
import com.konfigthis.client.model.PublicGetGroupInfoResponse;
import com.konfigthis.client.model.PublicGetGroupPoolPhotosResponse;
import com.konfigthis.client.model.PublicGetGroupTopicInfoResponse;
import com.konfigthis.client.model.PublicGetGroupTopicRepliesInfoResponse;
import com.konfigthis.client.model.PublicGetPersonInformationResponse;
import com.konfigthis.client.model.PublicGetPhotoExifResponse;
import com.konfigthis.client.model.PublicGetPhotoInfoResponse;
import com.konfigthis.client.model.PublicGetPhotoLicensesResponse;
import com.konfigthis.client.model.PublicGetPhotoListContextResponse;
import com.konfigthis.client.model.PublicGetPhotoSetContextResponse;
import com.konfigthis.client.model.PublicGetPhotoSizesResponse;
import com.konfigthis.client.model.PublicGetPhotostreamContextResponse;
import com.konfigthis.client.model.PublicGetUserAlbumsResponse;
import com.konfigthis.client.model.PublicGetUserPhotosResponse;
import com.konfigthis.client.model.PublicSearchPhotosResponse;
import com.konfigthis.client.model.PublicUploadPhotoRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicApi
 */
@Disabled
public class PublicApiTest {

    private static PublicApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PublicApi(apiClient);
    }

    /**
     * Returns next and previous photos for a photo in a group pool
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flickrGroupsPoolsGetContextTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String groupId = null;
        PublicFlickrGroupsPoolsGetContextResponse response = api.flickrGroupsPoolsGetContext(apiKey, photoId)
                .groupId(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns an access token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccessTokenTest() throws ApiException {
        String oauthConsumerKey = null;
        String oauthNonce = null;
        String oauthTimestamp = null;
        String oauthSignatureMethod = null;
        String oauthVersion = null;
        String oauthSignature = null;
        String oauthVerifier = null;
        String oauthToken = null;
        String response = api.getAccessToken(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of photos in an album.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlbumPhotosTest() throws ApiException {
        String apiKey = null;
        String photosetId = null;
        PublicGetAlbumPhotosResponse response = api.getAlbumPhotos(apiKey, photosetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of the user&#39;s favorite photos. Only photos which the calling user has permission to see are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFavoritePhotosTest() throws ApiException {
        String apiKey = null;
        String userId = null;
        Double minFaveDate = null;
        Double maxFaveDate = null;
        Double page = null;
        Double perPage = null;
        PublicGetFavoritePhotosResponse response = api.getFavoritePhotos(apiKey, userId)
                .minFaveDate(minFaveDate)
                .maxFaveDate(maxFaveDate)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns next and previous favorites for a photo in a user&#39;s favorites
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFavoritesContextTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String userId = null;
        PublicGetFavoritesContextResponse response = api.getFavoritesContext(apiKey, photoId)
                .userId(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Echos the input parameters back in the response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlickrTestEchoTest() throws ApiException {
        String apiKey = null;
        String echo = null;
        PublicGetFlickrTestEchoResponse response = api.getFlickrTestEcho(apiKey)
                .echo(echo)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of photos in a gallery.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGalleryPhotosTest() throws ApiException {
        String apiKey = null;
        String galleryId = null;
        PublicGetGalleryPhotosResponse response = api.getGalleryPhotos(apiKey, galleryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of discussion topics in a group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupDiscussionTopicsTest() throws ApiException {
        String apiKey = null;
        String groupId = null;
        Double page = null;
        Double perPage = null;
        PublicGetGroupDiscussionTopicsResponse response = api.getGroupDiscussionTopics(apiKey)
                .groupId(groupId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get information about a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupInfoTest() throws ApiException {
        String apiKey = null;
        String groupId = null;
        String groupPathAlias = null;
        String lang = null;
        PublicGetGroupInfoResponse response = api.getGroupInfo(apiKey)
                .groupId(groupId)
                .groupPathAlias(groupPathAlias)
                .lang(lang)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of pool photos for a given group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupPoolPhotosTest() throws ApiException {
        String apiKey = null;
        String groupId = null;
        PublicGetGroupPoolPhotosResponse response = api.getGroupPoolPhotos(apiKey)
                .groupId(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get information about a group discussion topic
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupTopicInfoTest() throws ApiException {
        String apiKey = null;
        String topicId = null;
        String groupId = null;
        PublicGetGroupTopicInfoResponse response = api.getGroupTopicInfo(apiKey, topicId)
                .groupId(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get information on a group topic reply
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupTopicRepliesInfoTest() throws ApiException {
        String apiKey = null;
        String topicId = null;
        String replyId = null;
        String groupId = null;
        PublicGetGroupTopicRepliesInfoResponse response = api.getGroupTopicRepliesInfo(apiKey, topicId, replyId)
                .groupId(groupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns an oauth token and oauth token secret
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOAuthTokenTest() throws ApiException {
        String oauthConsumerKey = null;
        String oauthNonce = null;
        String oauthTimestamp = null;
        String oauthSignatureMethod = null;
        String oauthVersion = null;
        String oauthSignature = null;
        String oauthCallback = null;
        String response = api.getOAuthToken(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a person
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPersonInformationTest() throws ApiException {
        String apiKey = null;
        String userId = null;
        PublicGetPersonInformationResponse response = api.getPersonInformation(apiKey)
                .userId(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a list of EXIF/TIFF/GPS tags for a given photo. The calling user must have permission to view the photo.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotoExifTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String secret = null;
        PublicGetPhotoExifResponse response = api.getPhotoExif(apiKey, photoId)
                .secret(secret)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a photo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotoInfoTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        PublicGetPhotoInfoResponse response = api.getPhotoInfo(apiKey, photoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches a list of available photo licenses for Flickr
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotoLicensesTest() throws ApiException {
        String apiKey = null;
        PublicGetPhotoLicensesResponse response = api.getPhotoLicenses(apiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns next and previous photos in a photo list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotoListContextTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String photolistId = null;
        PublicGetPhotoListContextResponse response = api.getPhotoListContext(apiKey, photoId, photolistId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns next and previous photos for a photo in a set
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotoSetContextTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        String photosetId = null;
        PublicGetPhotoSetContextResponse response = api.getPhotoSetContext(apiKey, photoId)
                .photosetId(photosetId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns photo sizes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotoSizesTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        PublicGetPhotoSizesResponse response = api.getPhotoSizes(apiKey, photoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns next and previous photos for a photo in a photostream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhotostreamContextTest() throws ApiException {
        String apiKey = null;
        String photoId = null;
        PublicGetPhotostreamContextResponse response = api.getPhotostreamContext(apiKey, photoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the albums belonging to the specified user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAlbumsTest() throws ApiException {
        String apiKey = null;
        String userId = null;
        Double page = null;
        Double perPage = null;
        PublicGetUserAlbumsResponse response = api.getUserAlbums(apiKey, userId)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Return photos from the given user&#39;s photostream
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPhotosTest() throws ApiException {
        String apiKey = null;
        String userId = null;
        Double safeSearch = null;
        Double minUploadDate = null;
        Double maxUploadDate = null;
        Double minTakenDate = null;
        Double maxTakenDate = null;
        Double contentType = null;
        Double privacyFilter = null;
        Double page = null;
        Double perPage = null;
        PublicGetUserPhotosResponse response = api.getUserPhotos(apiKey, userId)
                .safeSearch(safeSearch)
                .minUploadDate(minUploadDate)
                .maxUploadDate(maxUploadDate)
                .minTakenDate(minTakenDate)
                .maxTakenDate(maxTakenDate)
                .contentType(contentType)
                .privacyFilter(privacyFilter)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Return a list of photos matching some criteria.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPhotosTest() throws ApiException {
        String apiKey = null;
        String text = null;
        String tags = null;
        String userId = null;
        String minUploadDate = null;
        String maxUploadDate = null;
        String minTakenDate = null;
        String maxTakenDate = null;
        String license = null;
        String sort = null;
        Double privacyFilter = null;
        String bbox = null;
        String accuracy = null;
        Double safeSearch = null;
        Double contentType = null;
        String machineTags = null;
        String machineTagMode = null;
        String groupId = null;
        String contacts = null;
        String woeId = null;
        String placeId = null;
        String media = null;
        String hasGeo = null;
        String geoContext = null;
        String lat = null;
        String lon = null;
        Double radius = null;
        String radiusUnits = null;
        Boolean isCommons = null;
        Boolean inGallery = null;
        Boolean isGetty = null;
        Double perPage = null;
        Double page = null;
        PublicSearchPhotosResponse response = api.searchPhotos(apiKey)
                .text(text)
                .tags(tags)
                .userId(userId)
                .minUploadDate(minUploadDate)
                .maxUploadDate(maxUploadDate)
                .minTakenDate(minTakenDate)
                .maxTakenDate(maxTakenDate)
                .license(license)
                .sort(sort)
                .privacyFilter(privacyFilter)
                .bbox(bbox)
                .accuracy(accuracy)
                .safeSearch(safeSearch)
                .contentType(contentType)
                .machineTags(machineTags)
                .machineTagMode(machineTagMode)
                .groupId(groupId)
                .contacts(contacts)
                .woeId(woeId)
                .placeId(placeId)
                .media(media)
                .hasGeo(hasGeo)
                .geoContext(geoContext)
                .lat(lat)
                .lon(lon)
                .radius(radius)
                .radiusUnits(radiusUnits)
                .isCommons(isCommons)
                .inGallery(inGallery)
                .isGetty(isGetty)
                .perPage(perPage)
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Uploads a new photo to Flickr
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadPhotoTest() throws ApiException {
        String apiKey = null;
        File photo = null;
        String tags = null;
        String title = null;
        String description = null;
        String contentType = null;
        String hidden = null;
        String isFamily = null;
        String isFriend = null;
        String isPublic = null;
        String safetyLevel = null;
        Object response = api.uploadPhoto(apiKey, photo)
                .tags(tags)
                .title(title)
                .description(description)
                .contentType(contentType)
                .hidden(hidden)
                .isFamily(isFamily)
                .isFriend(isFriend)
                .isPublic(isPublic)
                .safetyLevel(safetyLevel)
                .execute();
        // TODO: test validations
    }

}
