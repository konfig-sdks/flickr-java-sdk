/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Album
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Album {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CAN_COMMENT = "can_comment";
  @SerializedName(SERIALIZED_NAME_CAN_COMMENT)
  private Boolean canComment;

  public static final String SERIALIZED_NAME_COUNT_COMMENTS = "count_comments";
  @SerializedName(SERIALIZED_NAME_COUNT_COMMENTS)
  private Double countComments;

  public static final String SERIALIZED_NAME_COUNT_VIEWS = "count_views";
  @SerializedName(SERIALIZED_NAME_COUNT_VIEWS)
  private Double countViews;

  public static final String SERIALIZED_NAME_DATE_CREATE = "date_create";
  @SerializedName(SERIALIZED_NAME_DATE_CREATE)
  private Double dateCreate;

  public static final String SERIALIZED_NAME_DATE_UPDATE = "date_update";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATE)
  private Double dateUpdate;

  public static final String SERIALIZED_NAME_FARM = "farm";
  @SerializedName(SERIALIZED_NAME_FARM)
  private String farm;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PHOTOS = "photos";
  @SerializedName(SERIALIZED_NAME_PHOTOS)
  private Double photos;

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private String primary;

  public static final String SERIALIZED_NAME_SECRET = "secret";
  @SerializedName(SERIALIZED_NAME_SECRET)
  private String secret;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_VIDEOS = "videos";
  @SerializedName(SERIALIZED_NAME_VIDEOS)
  private Double videos;

  public Album() {
  }

  public Album title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Album description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Album canComment(Boolean canComment) {
    
    
    
    
    this.canComment = canComment;
    return this;
  }

   /**
   * Get canComment
   * @return canComment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanComment() {
    return canComment;
  }


  public void setCanComment(Boolean canComment) {
    
    
    
    this.canComment = canComment;
  }


  public Album countComments(Double countComments) {
    
    
    
    
    this.countComments = countComments;
    return this;
  }

  public Album countComments(Integer countComments) {
    
    
    
    
    this.countComments = countComments.doubleValue();
    return this;
  }

   /**
   * Get countComments
   * @return countComments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCountComments() {
    return countComments;
  }


  public void setCountComments(Double countComments) {
    
    
    
    this.countComments = countComments;
  }


  public Album countViews(Double countViews) {
    
    
    
    
    this.countViews = countViews;
    return this;
  }

  public Album countViews(Integer countViews) {
    
    
    
    
    this.countViews = countViews.doubleValue();
    return this;
  }

   /**
   * Get countViews
   * @return countViews
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getCountViews() {
    return countViews;
  }


  public void setCountViews(Double countViews) {
    
    
    
    this.countViews = countViews;
  }


  public Album dateCreate(Double dateCreate) {
    
    
    
    
    this.dateCreate = dateCreate;
    return this;
  }

  public Album dateCreate(Integer dateCreate) {
    
    
    
    
    this.dateCreate = dateCreate.doubleValue();
    return this;
  }

   /**
   * Get dateCreate
   * @return dateCreate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDateCreate() {
    return dateCreate;
  }


  public void setDateCreate(Double dateCreate) {
    
    
    
    this.dateCreate = dateCreate;
  }


  public Album dateUpdate(Double dateUpdate) {
    
    
    
    
    this.dateUpdate = dateUpdate;
    return this;
  }

  public Album dateUpdate(Integer dateUpdate) {
    
    
    
    
    this.dateUpdate = dateUpdate.doubleValue();
    return this;
  }

   /**
   * Get dateUpdate
   * @return dateUpdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDateUpdate() {
    return dateUpdate;
  }


  public void setDateUpdate(Double dateUpdate) {
    
    
    
    this.dateUpdate = dateUpdate;
  }


  public Album farm(String farm) {
    
    
    
    
    this.farm = farm;
    return this;
  }

   /**
   * Get farm
   * @return farm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFarm() {
    return farm;
  }


  public void setFarm(String farm) {
    
    
    
    this.farm = farm;
  }


  public Album id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Album photos(Double photos) {
    
    
    
    
    this.photos = photos;
    return this;
  }

  public Album photos(Integer photos) {
    
    
    
    
    this.photos = photos.doubleValue();
    return this;
  }

   /**
   * Get photos
   * @return photos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPhotos() {
    return photos;
  }


  public void setPhotos(Double photos) {
    
    
    
    this.photos = photos;
  }


  public Album primary(String primary) {
    
    
    
    
    this.primary = primary;
    return this;
  }

   /**
   * Get primary
   * @return primary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrimary() {
    return primary;
  }


  public void setPrimary(String primary) {
    
    
    
    this.primary = primary;
  }


  public Album secret(String secret) {
    
    
    
    
    this.secret = secret;
    return this;
  }

   /**
   * Get secret
   * @return secret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSecret() {
    return secret;
  }


  public void setSecret(String secret) {
    
    
    
    this.secret = secret;
  }


  public Album server(String server) {
    
    
    
    
    this.server = server;
    return this;
  }

   /**
   * Get server
   * @return server
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getServer() {
    return server;
  }


  public void setServer(String server) {
    
    
    
    this.server = server;
  }


  public Album videos(Double videos) {
    
    
    
    
    this.videos = videos;
    return this;
  }

  public Album videos(Integer videos) {
    
    
    
    
    this.videos = videos.doubleValue();
    return this;
  }

   /**
   * Get videos
   * @return videos
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getVideos() {
    return videos;
  }


  public void setVideos(Double videos) {
    
    
    
    this.videos = videos;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Album instance itself
   */
  public Album putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Album album = (Album) o;
    return Objects.equals(this.title, album.title) &&
        Objects.equals(this.description, album.description) &&
        Objects.equals(this.canComment, album.canComment) &&
        Objects.equals(this.countComments, album.countComments) &&
        Objects.equals(this.countViews, album.countViews) &&
        Objects.equals(this.dateCreate, album.dateCreate) &&
        Objects.equals(this.dateUpdate, album.dateUpdate) &&
        Objects.equals(this.farm, album.farm) &&
        Objects.equals(this.id, album.id) &&
        Objects.equals(this.photos, album.photos) &&
        Objects.equals(this.primary, album.primary) &&
        Objects.equals(this.secret, album.secret) &&
        Objects.equals(this.server, album.server) &&
        Objects.equals(this.videos, album.videos)&&
        Objects.equals(this.additionalProperties, album.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, canComment, countComments, countViews, dateCreate, dateUpdate, farm, id, photos, primary, secret, server, videos, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Album {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    canComment: ").append(toIndentedString(canComment)).append("\n");
    sb.append("    countComments: ").append(toIndentedString(countComments)).append("\n");
    sb.append("    countViews: ").append(toIndentedString(countViews)).append("\n");
    sb.append("    dateCreate: ").append(toIndentedString(dateCreate)).append("\n");
    sb.append("    dateUpdate: ").append(toIndentedString(dateUpdate)).append("\n");
    sb.append("    farm: ").append(toIndentedString(farm)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    photos: ").append(toIndentedString(photos)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    videos: ").append(toIndentedString(videos)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("can_comment");
    openapiFields.add("count_comments");
    openapiFields.add("count_views");
    openapiFields.add("date_create");
    openapiFields.add("date_update");
    openapiFields.add("farm");
    openapiFields.add("id");
    openapiFields.add("photos");
    openapiFields.add("primary");
    openapiFields.add("secret");
    openapiFields.add("server");
    openapiFields.add("videos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Album
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Album.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Album is not found in the empty JSON string", Album.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("farm") != null && !jsonObj.get("farm").isJsonNull()) && !jsonObj.get("farm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `farm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("farm").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("primary") != null && !jsonObj.get("primary").isJsonNull()) && !jsonObj.get("primary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary").toString()));
      }
      if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get("secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Album.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Album' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Album> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Album.class));

       return (TypeAdapter<T>) new TypeAdapter<Album>() {
           @Override
           public void write(JsonWriter out, Album value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Album read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Album instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Album given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Album
  * @throws IOException if the JSON string is invalid with respect to Album
  */
  public static Album fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Album.class);
  }

 /**
  * Convert an instance of Album to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

