/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Cover;
import com.konfigthis.client.model.GroupBlast;
import com.konfigthis.client.model.GroupDescription;
import com.konfigthis.client.model.GroupRestrictions;
import com.konfigthis.client.model.GroupRoles;
import com.konfigthis.client.model.GroupThrottle;
import com.konfigthis.client.model.PhotoURLs;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Group
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Group {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private GroupDescription description;

  public static final String SERIALIZED_NAME_BLAST = "blast";
  @SerializedName(SERIALIZED_NAME_BLAST)
  private GroupBlast blast;

  public static final String SERIALIZED_NAME_COVER = "cover";
  @SerializedName(SERIALIZED_NAME_COVER)
  private Cover cover;

  public static final String SERIALIZED_NAME_COVERPHOTO_FARM = "coverphoto_farm";
  @SerializedName(SERIALIZED_NAME_COVERPHOTO_FARM)
  private String coverphotoFarm;

  public static final String SERIALIZED_NAME_COVERPHOTO_SERVER = "coverphoto_server";
  @SerializedName(SERIALIZED_NAME_COVERPHOTO_SERVER)
  private String coverphotoServer;

  public static final String SERIALIZED_NAME_COVERPHOTO_URL = "coverphoto_url";
  @SerializedName(SERIALIZED_NAME_COVERPHOTO_URL)
  private PhotoURLs coverphotoUrl;

  public static final String SERIALIZED_NAME_ICONFARM = "iconfarm";
  @SerializedName(SERIALIZED_NAME_ICONFARM)
  private String iconfarm;

  public static final String SERIALIZED_NAME_ICONSERVER = "iconserver";
  @SerializedName(SERIALIZED_NAME_ICONSERVER)
  private String iconserver;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_ADMIN = "is_admin";
  @SerializedName(SERIALIZED_NAME_IS_ADMIN)
  private Boolean isAdmin;

  public static final String SERIALIZED_NAME_IS_MEMBER = "is_member";
  @SerializedName(SERIALIZED_NAME_IS_MEMBER)
  private Boolean isMember;

  public static final String SERIALIZED_NAME_IS_MODERATOR = "is_moderator";
  @SerializedName(SERIALIZED_NAME_IS_MODERATOR)
  private Boolean isModerator;

  public static final String SERIALIZED_NAME_ISPOOLMODERATED = "ispoolmoderated";
  @SerializedName(SERIALIZED_NAME_ISPOOLMODERATED)
  private Boolean ispoolmoderated;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private GroupDescription members;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private GroupDescription name;

  public static final String SERIALIZED_NAME_PATH_ALIAS = "path_alias";
  @SerializedName(SERIALIZED_NAME_PATH_ALIAS)
  private String pathAlias;

  public static final String SERIALIZED_NAME_POOL_COUNT = "pool_count";
  @SerializedName(SERIALIZED_NAME_POOL_COUNT)
  private GroupDescription poolCount;

  public static final String SERIALIZED_NAME_POOL_ROWS = "pool_rows";
  @SerializedName(SERIALIZED_NAME_POOL_ROWS)
  private Integer poolRows;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private GroupDescription privacy;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private GroupRestrictions restrictions;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private GroupRoles roles;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private GroupDescription rules;

  public static final String SERIALIZED_NAME_THROTTLE = "throttle";
  @SerializedName(SERIALIZED_NAME_THROTTLE)
  private GroupThrottle throttle;

  public static final String SERIALIZED_NAME_TOPIC_COUNT = "topic_count";
  @SerializedName(SERIALIZED_NAME_TOPIC_COUNT)
  private GroupDescription topicCount;

  public Group() {
  }

  public Group description(GroupDescription description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupDescription getDescription() {
    return description;
  }


  public void setDescription(GroupDescription description) {
    
    
    
    this.description = description;
  }


  public Group blast(GroupBlast blast) {
    
    
    
    
    this.blast = blast;
    return this;
  }

   /**
   * Get blast
   * @return blast
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupBlast getBlast() {
    return blast;
  }


  public void setBlast(GroupBlast blast) {
    
    
    
    this.blast = blast;
  }


  public Group cover(Cover cover) {
    
    
    
    
    this.cover = cover;
    return this;
  }

   /**
   * Get cover
   * @return cover
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Cover getCover() {
    return cover;
  }


  public void setCover(Cover cover) {
    
    
    
    this.cover = cover;
  }


  public Group coverphotoFarm(String coverphotoFarm) {
    
    
    
    
    this.coverphotoFarm = coverphotoFarm;
    return this;
  }

   /**
   * Get coverphotoFarm
   * @return coverphotoFarm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCoverphotoFarm() {
    return coverphotoFarm;
  }


  public void setCoverphotoFarm(String coverphotoFarm) {
    
    
    
    this.coverphotoFarm = coverphotoFarm;
  }


  public Group coverphotoServer(String coverphotoServer) {
    
    
    
    
    this.coverphotoServer = coverphotoServer;
    return this;
  }

   /**
   * Get coverphotoServer
   * @return coverphotoServer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCoverphotoServer() {
    return coverphotoServer;
  }


  public void setCoverphotoServer(String coverphotoServer) {
    
    
    
    this.coverphotoServer = coverphotoServer;
  }


  public Group coverphotoUrl(PhotoURLs coverphotoUrl) {
    
    
    
    
    this.coverphotoUrl = coverphotoUrl;
    return this;
  }

   /**
   * Get coverphotoUrl
   * @return coverphotoUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PhotoURLs getCoverphotoUrl() {
    return coverphotoUrl;
  }


  public void setCoverphotoUrl(PhotoURLs coverphotoUrl) {
    
    
    
    this.coverphotoUrl = coverphotoUrl;
  }


  public Group iconfarm(String iconfarm) {
    
    
    
    
    this.iconfarm = iconfarm;
    return this;
  }

   /**
   * Get iconfarm
   * @return iconfarm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIconfarm() {
    return iconfarm;
  }


  public void setIconfarm(String iconfarm) {
    
    
    
    this.iconfarm = iconfarm;
  }


  public Group iconserver(String iconserver) {
    
    
    
    
    this.iconserver = iconserver;
    return this;
  }

   /**
   * Get iconserver
   * @return iconserver
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIconserver() {
    return iconserver;
  }


  public void setIconserver(String iconserver) {
    
    
    
    this.iconserver = iconserver;
  }


  public Group id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Group isAdmin(Boolean isAdmin) {
    
    
    
    
    this.isAdmin = isAdmin;
    return this;
  }

   /**
   * Get isAdmin
   * @return isAdmin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsAdmin() {
    return isAdmin;
  }


  public void setIsAdmin(Boolean isAdmin) {
    
    
    
    this.isAdmin = isAdmin;
  }


  public Group isMember(Boolean isMember) {
    
    
    
    
    this.isMember = isMember;
    return this;
  }

   /**
   * Get isMember
   * @return isMember
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsMember() {
    return isMember;
  }


  public void setIsMember(Boolean isMember) {
    
    
    
    this.isMember = isMember;
  }


  public Group isModerator(Boolean isModerator) {
    
    
    
    
    this.isModerator = isModerator;
    return this;
  }

   /**
   * Get isModerator
   * @return isModerator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsModerator() {
    return isModerator;
  }


  public void setIsModerator(Boolean isModerator) {
    
    
    
    this.isModerator = isModerator;
  }


  public Group ispoolmoderated(Boolean ispoolmoderated) {
    
    
    
    
    this.ispoolmoderated = ispoolmoderated;
    return this;
  }

   /**
   * Get ispoolmoderated
   * @return ispoolmoderated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIspoolmoderated() {
    return ispoolmoderated;
  }


  public void setIspoolmoderated(Boolean ispoolmoderated) {
    
    
    
    this.ispoolmoderated = ispoolmoderated;
  }


  public Group lang(String lang) {
    
    
    
    
    this.lang = lang;
    return this;
  }

   /**
   * Get lang
   * @return lang
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLang() {
    return lang;
  }


  public void setLang(String lang) {
    
    
    
    this.lang = lang;
  }


  public Group members(GroupDescription members) {
    
    
    
    
    this.members = members;
    return this;
  }

   /**
   * Get members
   * @return members
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupDescription getMembers() {
    return members;
  }


  public void setMembers(GroupDescription members) {
    
    
    
    this.members = members;
  }


  public Group name(GroupDescription name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupDescription getName() {
    return name;
  }


  public void setName(GroupDescription name) {
    
    
    
    this.name = name;
  }


  public Group pathAlias(String pathAlias) {
    
    
    
    
    this.pathAlias = pathAlias;
    return this;
  }

   /**
   * Get pathAlias
   * @return pathAlias
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPathAlias() {
    return pathAlias;
  }


  public void setPathAlias(String pathAlias) {
    
    
    
    this.pathAlias = pathAlias;
  }


  public Group poolCount(GroupDescription poolCount) {
    
    
    
    
    this.poolCount = poolCount;
    return this;
  }

   /**
   * Get poolCount
   * @return poolCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupDescription getPoolCount() {
    return poolCount;
  }


  public void setPoolCount(GroupDescription poolCount) {
    
    
    
    this.poolCount = poolCount;
  }


  public Group poolRows(Integer poolRows) {
    
    
    
    
    this.poolRows = poolRows;
    return this;
  }

   /**
   * Get poolRows
   * @return poolRows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPoolRows() {
    return poolRows;
  }


  public void setPoolRows(Integer poolRows) {
    
    
    
    this.poolRows = poolRows;
  }


  public Group privacy(GroupDescription privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

   /**
   * Get privacy
   * @return privacy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupDescription getPrivacy() {
    return privacy;
  }


  public void setPrivacy(GroupDescription privacy) {
    
    
    
    this.privacy = privacy;
  }


  public Group restrictions(GroupRestrictions restrictions) {
    
    
    
    
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupRestrictions getRestrictions() {
    return restrictions;
  }


  public void setRestrictions(GroupRestrictions restrictions) {
    
    
    
    this.restrictions = restrictions;
  }


  public Group roles(GroupRoles roles) {
    
    
    
    
    this.roles = roles;
    return this;
  }

   /**
   * Get roles
   * @return roles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupRoles getRoles() {
    return roles;
  }


  public void setRoles(GroupRoles roles) {
    
    
    
    this.roles = roles;
  }


  public Group rules(GroupDescription rules) {
    
    
    
    
    this.rules = rules;
    return this;
  }

   /**
   * Get rules
   * @return rules
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupDescription getRules() {
    return rules;
  }


  public void setRules(GroupDescription rules) {
    
    
    
    this.rules = rules;
  }


  public Group throttle(GroupThrottle throttle) {
    
    
    
    
    this.throttle = throttle;
    return this;
  }

   /**
   * Get throttle
   * @return throttle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupThrottle getThrottle() {
    return throttle;
  }


  public void setThrottle(GroupThrottle throttle) {
    
    
    
    this.throttle = throttle;
  }


  public Group topicCount(GroupDescription topicCount) {
    
    
    
    
    this.topicCount = topicCount;
    return this;
  }

   /**
   * Get topicCount
   * @return topicCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GroupDescription getTopicCount() {
    return topicCount;
  }


  public void setTopicCount(GroupDescription topicCount) {
    
    
    
    this.topicCount = topicCount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Group instance itself
   */
  public Group putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Group group = (Group) o;
    return Objects.equals(this.description, group.description) &&
        Objects.equals(this.blast, group.blast) &&
        Objects.equals(this.cover, group.cover) &&
        Objects.equals(this.coverphotoFarm, group.coverphotoFarm) &&
        Objects.equals(this.coverphotoServer, group.coverphotoServer) &&
        Objects.equals(this.coverphotoUrl, group.coverphotoUrl) &&
        Objects.equals(this.iconfarm, group.iconfarm) &&
        Objects.equals(this.iconserver, group.iconserver) &&
        Objects.equals(this.id, group.id) &&
        Objects.equals(this.isAdmin, group.isAdmin) &&
        Objects.equals(this.isMember, group.isMember) &&
        Objects.equals(this.isModerator, group.isModerator) &&
        Objects.equals(this.ispoolmoderated, group.ispoolmoderated) &&
        Objects.equals(this.lang, group.lang) &&
        Objects.equals(this.members, group.members) &&
        Objects.equals(this.name, group.name) &&
        Objects.equals(this.pathAlias, group.pathAlias) &&
        Objects.equals(this.poolCount, group.poolCount) &&
        Objects.equals(this.poolRows, group.poolRows) &&
        Objects.equals(this.privacy, group.privacy) &&
        Objects.equals(this.restrictions, group.restrictions) &&
        Objects.equals(this.roles, group.roles) &&
        Objects.equals(this.rules, group.rules) &&
        Objects.equals(this.throttle, group.throttle) &&
        Objects.equals(this.topicCount, group.topicCount)&&
        Objects.equals(this.additionalProperties, group.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, blast, cover, coverphotoFarm, coverphotoServer, coverphotoUrl, iconfarm, iconserver, id, isAdmin, isMember, isModerator, ispoolmoderated, lang, members, name, pathAlias, poolCount, poolRows, privacy, restrictions, roles, rules, throttle, topicCount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Group {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    blast: ").append(toIndentedString(blast)).append("\n");
    sb.append("    cover: ").append(toIndentedString(cover)).append("\n");
    sb.append("    coverphotoFarm: ").append(toIndentedString(coverphotoFarm)).append("\n");
    sb.append("    coverphotoServer: ").append(toIndentedString(coverphotoServer)).append("\n");
    sb.append("    coverphotoUrl: ").append(toIndentedString(coverphotoUrl)).append("\n");
    sb.append("    iconfarm: ").append(toIndentedString(iconfarm)).append("\n");
    sb.append("    iconserver: ").append(toIndentedString(iconserver)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAdmin: ").append(toIndentedString(isAdmin)).append("\n");
    sb.append("    isMember: ").append(toIndentedString(isMember)).append("\n");
    sb.append("    isModerator: ").append(toIndentedString(isModerator)).append("\n");
    sb.append("    ispoolmoderated: ").append(toIndentedString(ispoolmoderated)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pathAlias: ").append(toIndentedString(pathAlias)).append("\n");
    sb.append("    poolCount: ").append(toIndentedString(poolCount)).append("\n");
    sb.append("    poolRows: ").append(toIndentedString(poolRows)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    throttle: ").append(toIndentedString(throttle)).append("\n");
    sb.append("    topicCount: ").append(toIndentedString(topicCount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("blast");
    openapiFields.add("cover");
    openapiFields.add("coverphoto_farm");
    openapiFields.add("coverphoto_server");
    openapiFields.add("coverphoto_url");
    openapiFields.add("iconfarm");
    openapiFields.add("iconserver");
    openapiFields.add("id");
    openapiFields.add("is_admin");
    openapiFields.add("is_member");
    openapiFields.add("is_moderator");
    openapiFields.add("ispoolmoderated");
    openapiFields.add("lang");
    openapiFields.add("members");
    openapiFields.add("name");
    openapiFields.add("path_alias");
    openapiFields.add("pool_count");
    openapiFields.add("pool_rows");
    openapiFields.add("privacy");
    openapiFields.add("restrictions");
    openapiFields.add("roles");
    openapiFields.add("rules");
    openapiFields.add("throttle");
    openapiFields.add("topic_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Group
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Group.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Group is not found in the empty JSON string", Group.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        GroupDescription.validateJsonObject(jsonObj.getAsJsonObject("description"));
      }
      // validate the optional field `blast`
      if (jsonObj.get("blast") != null && !jsonObj.get("blast").isJsonNull()) {
        GroupBlast.validateJsonObject(jsonObj.getAsJsonObject("blast"));
      }
      // validate the optional field `cover`
      if (jsonObj.get("cover") != null && !jsonObj.get("cover").isJsonNull()) {
        Cover.validateJsonObject(jsonObj.getAsJsonObject("cover"));
      }
      if ((jsonObj.get("coverphoto_farm") != null && !jsonObj.get("coverphoto_farm").isJsonNull()) && !jsonObj.get("coverphoto_farm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverphoto_farm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverphoto_farm").toString()));
      }
      if ((jsonObj.get("coverphoto_server") != null && !jsonObj.get("coverphoto_server").isJsonNull()) && !jsonObj.get("coverphoto_server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coverphoto_server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coverphoto_server").toString()));
      }
      // validate the optional field `coverphoto_url`
      if (jsonObj.get("coverphoto_url") != null && !jsonObj.get("coverphoto_url").isJsonNull()) {
        PhotoURLs.validateJsonObject(jsonObj.getAsJsonObject("coverphoto_url"));
      }
      if ((jsonObj.get("iconfarm") != null && !jsonObj.get("iconfarm").isJsonNull()) && !jsonObj.get("iconfarm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconfarm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconfarm").toString()));
      }
      if ((jsonObj.get("iconserver") != null && !jsonObj.get("iconserver").isJsonNull()) && !jsonObj.get("iconserver").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconserver` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconserver").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      // validate the optional field `members`
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        GroupDescription.validateJsonObject(jsonObj.getAsJsonObject("members"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        GroupDescription.validateJsonObject(jsonObj.getAsJsonObject("name"));
      }
      if ((jsonObj.get("path_alias") != null && !jsonObj.get("path_alias").isJsonNull()) && !jsonObj.get("path_alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path_alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path_alias").toString()));
      }
      // validate the optional field `pool_count`
      if (jsonObj.get("pool_count") != null && !jsonObj.get("pool_count").isJsonNull()) {
        GroupDescription.validateJsonObject(jsonObj.getAsJsonObject("pool_count"));
      }
      // validate the optional field `privacy`
      if (jsonObj.get("privacy") != null && !jsonObj.get("privacy").isJsonNull()) {
        GroupDescription.validateJsonObject(jsonObj.getAsJsonObject("privacy"));
      }
      // validate the optional field `restrictions`
      if (jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) {
        GroupRestrictions.validateJsonObject(jsonObj.getAsJsonObject("restrictions"));
      }
      // validate the optional field `roles`
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull()) {
        GroupRoles.validateJsonObject(jsonObj.getAsJsonObject("roles"));
      }
      // validate the optional field `rules`
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        GroupDescription.validateJsonObject(jsonObj.getAsJsonObject("rules"));
      }
      // validate the optional field `throttle`
      if (jsonObj.get("throttle") != null && !jsonObj.get("throttle").isJsonNull()) {
        GroupThrottle.validateJsonObject(jsonObj.getAsJsonObject("throttle"));
      }
      // validate the optional field `topic_count`
      if (jsonObj.get("topic_count") != null && !jsonObj.get("topic_count").isJsonNull()) {
        GroupDescription.validateJsonObject(jsonObj.getAsJsonObject("topic_count"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Group.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Group' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Group> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Group.class));

       return (TypeAdapter<T>) new TypeAdapter<Group>() {
           @Override
           public void write(JsonWriter out, Group value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Group read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Group instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Group given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Group
  * @throws IOException if the JSON string is invalid with respect to Group
  */
  public static Group fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Group.class);
  }

 /**
  * Convert an instance of Group to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

