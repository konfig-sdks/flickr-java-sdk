/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Topic;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PublicGetGroupDiscussionTopicsResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PublicGetGroupDiscussionTopicsResponse {
  public static final String SERIALIZED_NAME_ICONFARM = "iconfarm";
  @SerializedName(SERIALIZED_NAME_ICONFARM)
  private Double iconfarm;

  public static final String SERIALIZED_NAME_ICONSERVER = "iconserver";
  @SerializedName(SERIALIZED_NAME_ICONSERVER)
  private Double iconserver;

  public static final String SERIALIZED_NAME_ISPOOLMODERATED = "ispoolmoderated";
  @SerializedName(SERIALIZED_NAME_ISPOOLMODERATED)
  private Boolean ispoolmoderated;

  public static final String SERIALIZED_NAME_LANG = "lang";
  @SerializedName(SERIALIZED_NAME_LANG)
  private String lang;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private Double members;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Double page;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private Double pages;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private Double perPage;

  public static final String SERIALIZED_NAME_PRIVACY = "privacy";
  @SerializedName(SERIALIZED_NAME_PRIVACY)
  private Double privacy;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<Topic> topics = null;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public PublicGetGroupDiscussionTopicsResponse() {
  }

  public PublicGetGroupDiscussionTopicsResponse iconfarm(Double iconfarm) {
    
    
    
    
    this.iconfarm = iconfarm;
    return this;
  }

  public PublicGetGroupDiscussionTopicsResponse iconfarm(Integer iconfarm) {
    
    
    
    
    this.iconfarm = iconfarm.doubleValue();
    return this;
  }

   /**
   * Get iconfarm
   * @return iconfarm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getIconfarm() {
    return iconfarm;
  }


  public void setIconfarm(Double iconfarm) {
    
    
    
    this.iconfarm = iconfarm;
  }


  public PublicGetGroupDiscussionTopicsResponse iconserver(Double iconserver) {
    
    
    
    
    this.iconserver = iconserver;
    return this;
  }

  public PublicGetGroupDiscussionTopicsResponse iconserver(Integer iconserver) {
    
    
    
    
    this.iconserver = iconserver.doubleValue();
    return this;
  }

   /**
   * Get iconserver
   * @return iconserver
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getIconserver() {
    return iconserver;
  }


  public void setIconserver(Double iconserver) {
    
    
    
    this.iconserver = iconserver;
  }


  public PublicGetGroupDiscussionTopicsResponse ispoolmoderated(Boolean ispoolmoderated) {
    
    
    
    
    this.ispoolmoderated = ispoolmoderated;
    return this;
  }

   /**
   * Get ispoolmoderated
   * @return ispoolmoderated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIspoolmoderated() {
    return ispoolmoderated;
  }


  public void setIspoolmoderated(Boolean ispoolmoderated) {
    
    
    
    this.ispoolmoderated = ispoolmoderated;
  }


  public PublicGetGroupDiscussionTopicsResponse lang(String lang) {
    
    
    
    
    this.lang = lang;
    return this;
  }

   /**
   * Get lang
   * @return lang
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLang() {
    return lang;
  }


  public void setLang(String lang) {
    
    
    
    this.lang = lang;
  }


  public PublicGetGroupDiscussionTopicsResponse members(Double members) {
    
    
    
    
    this.members = members;
    return this;
  }

  public PublicGetGroupDiscussionTopicsResponse members(Integer members) {
    
    
    
    
    this.members = members.doubleValue();
    return this;
  }

   /**
   * Get members
   * @return members
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getMembers() {
    return members;
  }


  public void setMembers(Double members) {
    
    
    
    this.members = members;
  }


  public PublicGetGroupDiscussionTopicsResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public PublicGetGroupDiscussionTopicsResponse page(Double page) {
    
    
    
    
    this.page = page;
    return this;
  }

  public PublicGetGroupDiscussionTopicsResponse page(Integer page) {
    
    
    
    
    this.page = page.doubleValue();
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPage() {
    return page;
  }


  public void setPage(Double page) {
    
    
    
    this.page = page;
  }


  public PublicGetGroupDiscussionTopicsResponse pages(Double pages) {
    
    
    
    
    this.pages = pages;
    return this;
  }

  public PublicGetGroupDiscussionTopicsResponse pages(Integer pages) {
    
    
    
    
    this.pages = pages.doubleValue();
    return this;
  }

   /**
   * Get pages
   * @return pages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPages() {
    return pages;
  }


  public void setPages(Double pages) {
    
    
    
    this.pages = pages;
  }


  public PublicGetGroupDiscussionTopicsResponse perPage(Double perPage) {
    
    
    
    
    this.perPage = perPage;
    return this;
  }

  public PublicGetGroupDiscussionTopicsResponse perPage(Integer perPage) {
    
    
    
    
    this.perPage = perPage.doubleValue();
    return this;
  }

   /**
   * Get perPage
   * @return perPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPerPage() {
    return perPage;
  }


  public void setPerPage(Double perPage) {
    
    
    
    this.perPage = perPage;
  }


  public PublicGetGroupDiscussionTopicsResponse privacy(Double privacy) {
    
    
    
    
    this.privacy = privacy;
    return this;
  }

  public PublicGetGroupDiscussionTopicsResponse privacy(Integer privacy) {
    
    
    
    
    this.privacy = privacy.doubleValue();
    return this;
  }

   /**
   * Get privacy
   * @return privacy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPrivacy() {
    return privacy;
  }


  public void setPrivacy(Double privacy) {
    
    
    
    this.privacy = privacy;
  }


  public PublicGetGroupDiscussionTopicsResponse topics(List<Topic> topics) {
    
    
    
    
    this.topics = topics;
    return this;
  }

  public PublicGetGroupDiscussionTopicsResponse addTopicsItem(Topic topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

   /**
   * Get topics
   * @return topics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Topic> getTopics() {
    return topics;
  }


  public void setTopics(List<Topic> topics) {
    
    
    
    this.topics = topics;
  }


  public PublicGetGroupDiscussionTopicsResponse total(Double total) {
    
    
    
    
    this.total = total;
    return this;
  }

  public PublicGetGroupDiscussionTopicsResponse total(Integer total) {
    
    
    
    
    this.total = total.doubleValue();
    return this;
  }

   /**
   * Get total
   * @return total
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getTotal() {
    return total;
  }


  public void setTotal(Double total) {
    
    
    
    this.total = total;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PublicGetGroupDiscussionTopicsResponse instance itself
   */
  public PublicGetGroupDiscussionTopicsResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicGetGroupDiscussionTopicsResponse publicGetGroupDiscussionTopicsResponse = (PublicGetGroupDiscussionTopicsResponse) o;
    return Objects.equals(this.iconfarm, publicGetGroupDiscussionTopicsResponse.iconfarm) &&
        Objects.equals(this.iconserver, publicGetGroupDiscussionTopicsResponse.iconserver) &&
        Objects.equals(this.ispoolmoderated, publicGetGroupDiscussionTopicsResponse.ispoolmoderated) &&
        Objects.equals(this.lang, publicGetGroupDiscussionTopicsResponse.lang) &&
        Objects.equals(this.members, publicGetGroupDiscussionTopicsResponse.members) &&
        Objects.equals(this.name, publicGetGroupDiscussionTopicsResponse.name) &&
        Objects.equals(this.page, publicGetGroupDiscussionTopicsResponse.page) &&
        Objects.equals(this.pages, publicGetGroupDiscussionTopicsResponse.pages) &&
        Objects.equals(this.perPage, publicGetGroupDiscussionTopicsResponse.perPage) &&
        Objects.equals(this.privacy, publicGetGroupDiscussionTopicsResponse.privacy) &&
        Objects.equals(this.topics, publicGetGroupDiscussionTopicsResponse.topics) &&
        Objects.equals(this.total, publicGetGroupDiscussionTopicsResponse.total)&&
        Objects.equals(this.additionalProperties, publicGetGroupDiscussionTopicsResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(iconfarm, iconserver, ispoolmoderated, lang, members, name, page, pages, perPage, privacy, topics, total, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicGetGroupDiscussionTopicsResponse {\n");
    sb.append("    iconfarm: ").append(toIndentedString(iconfarm)).append("\n");
    sb.append("    iconserver: ").append(toIndentedString(iconserver)).append("\n");
    sb.append("    ispoolmoderated: ").append(toIndentedString(ispoolmoderated)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    privacy: ").append(toIndentedString(privacy)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("iconfarm");
    openapiFields.add("iconserver");
    openapiFields.add("ispoolmoderated");
    openapiFields.add("lang");
    openapiFields.add("members");
    openapiFields.add("name");
    openapiFields.add("page");
    openapiFields.add("pages");
    openapiFields.add("per_page");
    openapiFields.add("privacy");
    openapiFields.add("topics");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PublicGetGroupDiscussionTopicsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PublicGetGroupDiscussionTopicsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicGetGroupDiscussionTopicsResponse is not found in the empty JSON string", PublicGetGroupDiscussionTopicsResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("lang") != null && !jsonObj.get("lang").isJsonNull()) && !jsonObj.get("lang").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lang` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lang").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonNull()) {
        JsonArray jsonArraytopics = jsonObj.getAsJsonArray("topics");
        if (jsonArraytopics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("topics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
          }

          // validate the optional field `topics` (array)
          for (int i = 0; i < jsonArraytopics.size(); i++) {
            Topic.validateJsonObject(jsonArraytopics.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicGetGroupDiscussionTopicsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicGetGroupDiscussionTopicsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicGetGroupDiscussionTopicsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicGetGroupDiscussionTopicsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicGetGroupDiscussionTopicsResponse>() {
           @Override
           public void write(JsonWriter out, PublicGetGroupDiscussionTopicsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicGetGroupDiscussionTopicsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PublicGetGroupDiscussionTopicsResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PublicGetGroupDiscussionTopicsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PublicGetGroupDiscussionTopicsResponse
  * @throws IOException if the JSON string is invalid with respect to PublicGetGroupDiscussionTopicsResponse
  */
  public static PublicGetGroupDiscussionTopicsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicGetGroupDiscussionTopicsResponse.class);
  }

 /**
  * Convert an instance of PublicGetGroupDiscussionTopicsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

