/*
 * Flickr API Schema
 * A subset of Flickr's API defined in Swagger format.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.PublicFlickrGroupsPoolsGetContextResponse;
import com.konfigthis.client.model.PublicGetAlbumPhotosResponse;
import com.konfigthis.client.model.PublicGetFavoritePhotosResponse;
import com.konfigthis.client.model.PublicGetFavoritesContextResponse;
import com.konfigthis.client.model.PublicGetFlickrTestEchoResponse;
import com.konfigthis.client.model.PublicGetGalleryPhotosResponse;
import com.konfigthis.client.model.PublicGetGroupDiscussionTopicsResponse;
import com.konfigthis.client.model.PublicGetGroupInfoResponse;
import com.konfigthis.client.model.PublicGetGroupPoolPhotosResponse;
import com.konfigthis.client.model.PublicGetGroupTopicInfoResponse;
import com.konfigthis.client.model.PublicGetGroupTopicRepliesInfoResponse;
import com.konfigthis.client.model.PublicGetPersonInformationResponse;
import com.konfigthis.client.model.PublicGetPhotoExifResponse;
import com.konfigthis.client.model.PublicGetPhotoInfoResponse;
import com.konfigthis.client.model.PublicGetPhotoLicensesResponse;
import com.konfigthis.client.model.PublicGetPhotoListContextResponse;
import com.konfigthis.client.model.PublicGetPhotoSetContextResponse;
import com.konfigthis.client.model.PublicGetPhotoSizesResponse;
import com.konfigthis.client.model.PublicGetPhotostreamContextResponse;
import com.konfigthis.client.model.PublicGetUserAlbumsResponse;
import com.konfigthis.client.model.PublicGetUserPhotosResponse;
import com.konfigthis.client.model.PublicSearchPhotosResponse;
import com.konfigthis.client.model.PublicUploadPhotoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PublicApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PublicApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PublicApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call flickrGroupsPoolsGetContextCall(String apiKey, String photoId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.groups.pools.getContext";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (photoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_id", photoId));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flickrGroupsPoolsGetContextValidateBeforeCall(String apiKey, String photoId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling flickrGroupsPoolsGetContext(Async)");
        }

        // verify the required parameter 'photoId' is set
        if (photoId == null) {
            throw new ApiException("Missing the required parameter 'photoId' when calling flickrGroupsPoolsGetContext(Async)");
        }

        return flickrGroupsPoolsGetContextCall(apiKey, photoId, groupId, _callback);

    }


    private ApiResponse<PublicFlickrGroupsPoolsGetContextResponse> flickrGroupsPoolsGetContextWithHttpInfo(String apiKey, String photoId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = flickrGroupsPoolsGetContextValidateBeforeCall(apiKey, photoId, groupId, null);
        Type localVarReturnType = new TypeToken<PublicFlickrGroupsPoolsGetContextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call flickrGroupsPoolsGetContextAsync(String apiKey, String photoId, String groupId, final ApiCallback<PublicFlickrGroupsPoolsGetContextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = flickrGroupsPoolsGetContextValidateBeforeCall(apiKey, photoId, groupId, _callback);
        Type localVarReturnType = new TypeToken<PublicFlickrGroupsPoolsGetContextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FlickrGroupsPoolsGetContextRequestBuilder {
        private final String apiKey;
        private final String photoId;
        private String groupId;

        private FlickrGroupsPoolsGetContextRequestBuilder(String apiKey, String photoId) {
            this.apiKey = apiKey;
            this.photoId = photoId;
        }

        /**
         * Set groupId
         * @param groupId  (optional)
         * @return FlickrGroupsPoolsGetContextRequestBuilder
         */
        public FlickrGroupsPoolsGetContextRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for flickrGroupsPoolsGetContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return flickrGroupsPoolsGetContextCall(apiKey, photoId, groupId, _callback);
        }


        /**
         * Execute flickrGroupsPoolsGetContext request
         * @return PublicFlickrGroupsPoolsGetContextResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicFlickrGroupsPoolsGetContextResponse execute() throws ApiException {
            ApiResponse<PublicFlickrGroupsPoolsGetContextResponse> localVarResp = flickrGroupsPoolsGetContextWithHttpInfo(apiKey, photoId, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute flickrGroupsPoolsGetContext request with HTTP info returned
         * @return ApiResponse&lt;PublicFlickrGroupsPoolsGetContextResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicFlickrGroupsPoolsGetContextResponse> executeWithHttpInfo() throws ApiException {
            return flickrGroupsPoolsGetContextWithHttpInfo(apiKey, photoId, groupId);
        }

        /**
         * Execute flickrGroupsPoolsGetContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicFlickrGroupsPoolsGetContextResponse> _callback) throws ApiException {
            return flickrGroupsPoolsGetContextAsync(apiKey, photoId, groupId, _callback);
        }
    }

    /**
     * 
     * Returns next and previous photos for a photo in a group pool
     * @param apiKey  (required)
     * @param photoId  (required)
     * @return FlickrGroupsPoolsGetContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FlickrGroupsPoolsGetContextRequestBuilder flickrGroupsPoolsGetContext(String apiKey, String photoId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photoId == null) throw new IllegalArgumentException("\"photoId\" is required but got null");
            

        return new FlickrGroupsPoolsGetContextRequestBuilder(apiKey, photoId);
    }
    private okhttp3.Call getAccessTokenCall(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthVerifier, String oauthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/access_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthVerifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_verifier", oauthVerifier));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccessTokenValidateBeforeCall(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthVerifier, String oauthToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oauthConsumerKey' is set
        if (oauthConsumerKey == null) {
            throw new ApiException("Missing the required parameter 'oauthConsumerKey' when calling getAccessToken(Async)");
        }

        // verify the required parameter 'oauthNonce' is set
        if (oauthNonce == null) {
            throw new ApiException("Missing the required parameter 'oauthNonce' when calling getAccessToken(Async)");
        }

        // verify the required parameter 'oauthTimestamp' is set
        if (oauthTimestamp == null) {
            throw new ApiException("Missing the required parameter 'oauthTimestamp' when calling getAccessToken(Async)");
        }

        // verify the required parameter 'oauthSignatureMethod' is set
        if (oauthSignatureMethod == null) {
            throw new ApiException("Missing the required parameter 'oauthSignatureMethod' when calling getAccessToken(Async)");
        }

        // verify the required parameter 'oauthVersion' is set
        if (oauthVersion == null) {
            throw new ApiException("Missing the required parameter 'oauthVersion' when calling getAccessToken(Async)");
        }

        // verify the required parameter 'oauthSignature' is set
        if (oauthSignature == null) {
            throw new ApiException("Missing the required parameter 'oauthSignature' when calling getAccessToken(Async)");
        }

        // verify the required parameter 'oauthVerifier' is set
        if (oauthVerifier == null) {
            throw new ApiException("Missing the required parameter 'oauthVerifier' when calling getAccessToken(Async)");
        }

        // verify the required parameter 'oauthToken' is set
        if (oauthToken == null) {
            throw new ApiException("Missing the required parameter 'oauthToken' when calling getAccessToken(Async)");
        }

        return getAccessTokenCall(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken, _callback);

    }


    private ApiResponse<String> getAccessTokenWithHttpInfo(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthVerifier, String oauthToken) throws ApiException {
        okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccessTokenAsync(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthVerifier, String oauthToken, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccessTokenValidateBeforeCall(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccessTokenRequestBuilder {
        private final String oauthConsumerKey;
        private final String oauthNonce;
        private final String oauthTimestamp;
        private final String oauthSignatureMethod;
        private final String oauthVersion;
        private final String oauthSignature;
        private final String oauthVerifier;
        private final String oauthToken;

        private GetAccessTokenRequestBuilder(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthVerifier, String oauthToken) {
            this.oauthConsumerKey = oauthConsumerKey;
            this.oauthNonce = oauthNonce;
            this.oauthTimestamp = oauthTimestamp;
            this.oauthSignatureMethod = oauthSignatureMethod;
            this.oauthVersion = oauthVersion;
            this.oauthSignature = oauthSignature;
            this.oauthVerifier = oauthVerifier;
            this.oauthToken = oauthToken;
        }

        /**
         * Build call for getAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccessTokenCall(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken, _callback);
        }


        /**
         * Execute getAccessToken request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getAccessTokenWithHttpInfo(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccessToken request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getAccessTokenWithHttpInfo(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken);
        }

        /**
         * Execute getAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getAccessTokenAsync(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken, _callback);
        }
    }

    /**
     * 
     * Returns an access token
     * @param oauthConsumerKey  (required)
     * @param oauthNonce  (required)
     * @param oauthTimestamp  (required)
     * @param oauthSignatureMethod  (required)
     * @param oauthVersion  (required)
     * @param oauthSignature  (required)
     * @param oauthVerifier  (required)
     * @param oauthToken  (required)
     * @return GetAccessTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAccessTokenRequestBuilder getAccessToken(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthVerifier, String oauthToken) throws IllegalArgumentException {
        if (oauthConsumerKey == null) throw new IllegalArgumentException("\"oauthConsumerKey\" is required but got null");
            

        if (oauthNonce == null) throw new IllegalArgumentException("\"oauthNonce\" is required but got null");
            

        if (oauthTimestamp == null) throw new IllegalArgumentException("\"oauthTimestamp\" is required but got null");
            

        if (oauthSignatureMethod == null) throw new IllegalArgumentException("\"oauthSignatureMethod\" is required but got null");
            

        if (oauthVersion == null) throw new IllegalArgumentException("\"oauthVersion\" is required but got null");
            

        if (oauthSignature == null) throw new IllegalArgumentException("\"oauthSignature\" is required but got null");
            

        if (oauthVerifier == null) throw new IllegalArgumentException("\"oauthVerifier\" is required but got null");
            

        if (oauthToken == null) throw new IllegalArgumentException("\"oauthToken\" is required but got null");
            

        return new GetAccessTokenRequestBuilder(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthVerifier, oauthToken);
    }
    private okhttp3.Call getAlbumPhotosCall(String apiKey, String photosetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photosets.getPhotos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (photosetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photoset_id", photosetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlbumPhotosValidateBeforeCall(String apiKey, String photosetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getAlbumPhotos(Async)");
        }

        // verify the required parameter 'photosetId' is set
        if (photosetId == null) {
            throw new ApiException("Missing the required parameter 'photosetId' when calling getAlbumPhotos(Async)");
        }

        return getAlbumPhotosCall(apiKey, photosetId, _callback);

    }


    private ApiResponse<PublicGetAlbumPhotosResponse> getAlbumPhotosWithHttpInfo(String apiKey, String photosetId) throws ApiException {
        okhttp3.Call localVarCall = getAlbumPhotosValidateBeforeCall(apiKey, photosetId, null);
        Type localVarReturnType = new TypeToken<PublicGetAlbumPhotosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAlbumPhotosAsync(String apiKey, String photosetId, final ApiCallback<PublicGetAlbumPhotosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlbumPhotosValidateBeforeCall(apiKey, photosetId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetAlbumPhotosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAlbumPhotosRequestBuilder {
        private final String apiKey;
        private final String photosetId;

        private GetAlbumPhotosRequestBuilder(String apiKey, String photosetId) {
            this.apiKey = apiKey;
            this.photosetId = photosetId;
        }

        /**
         * Build call for getAlbumPhotos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAlbumPhotosCall(apiKey, photosetId, _callback);
        }


        /**
         * Execute getAlbumPhotos request
         * @return PublicGetAlbumPhotosResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetAlbumPhotosResponse execute() throws ApiException {
            ApiResponse<PublicGetAlbumPhotosResponse> localVarResp = getAlbumPhotosWithHttpInfo(apiKey, photosetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAlbumPhotos request with HTTP info returned
         * @return ApiResponse&lt;PublicGetAlbumPhotosResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetAlbumPhotosResponse> executeWithHttpInfo() throws ApiException {
            return getAlbumPhotosWithHttpInfo(apiKey, photosetId);
        }

        /**
         * Execute getAlbumPhotos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetAlbumPhotosResponse> _callback) throws ApiException {
            return getAlbumPhotosAsync(apiKey, photosetId, _callback);
        }
    }

    /**
     * 
     * Returns a list of photos in an album.
     * @param apiKey  (required)
     * @param photosetId  (required)
     * @return GetAlbumPhotosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAlbumPhotosRequestBuilder getAlbumPhotos(String apiKey, String photosetId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photosetId == null) throw new IllegalArgumentException("\"photosetId\" is required but got null");
            

        return new GetAlbumPhotosRequestBuilder(apiKey, photosetId);
    }
    private okhttp3.Call getFavoritePhotosCall(String apiKey, String userId, Double minFaveDate, Double maxFaveDate, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.favorites.getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (minFaveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_fave_date", minFaveDate));
        }

        if (maxFaveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_fave_date", maxFaveDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoritePhotosValidateBeforeCall(String apiKey, String userId, Double minFaveDate, Double maxFaveDate, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getFavoritePhotos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getFavoritePhotos(Async)");
        }

        return getFavoritePhotosCall(apiKey, userId, minFaveDate, maxFaveDate, page, perPage, _callback);

    }


    private ApiResponse<PublicGetFavoritePhotosResponse> getFavoritePhotosWithHttpInfo(String apiKey, String userId, Double minFaveDate, Double maxFaveDate, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getFavoritePhotosValidateBeforeCall(apiKey, userId, minFaveDate, maxFaveDate, page, perPage, null);
        Type localVarReturnType = new TypeToken<PublicGetFavoritePhotosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFavoritePhotosAsync(String apiKey, String userId, Double minFaveDate, Double maxFaveDate, Double page, Double perPage, final ApiCallback<PublicGetFavoritePhotosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoritePhotosValidateBeforeCall(apiKey, userId, minFaveDate, maxFaveDate, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PublicGetFavoritePhotosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFavoritePhotosRequestBuilder {
        private final String apiKey;
        private final String userId;
        private Double minFaveDate;
        private Double maxFaveDate;
        private Double page;
        private Double perPage;

        private GetFavoritePhotosRequestBuilder(String apiKey, String userId) {
            this.apiKey = apiKey;
            this.userId = userId;
        }

        /**
         * Set minFaveDate
         * @param minFaveDate  (optional)
         * @return GetFavoritePhotosRequestBuilder
         */
        public GetFavoritePhotosRequestBuilder minFaveDate(Double minFaveDate) {
            this.minFaveDate = minFaveDate;
            return this;
        }
        
        /**
         * Set maxFaveDate
         * @param maxFaveDate  (optional)
         * @return GetFavoritePhotosRequestBuilder
         */
        public GetFavoritePhotosRequestBuilder maxFaveDate(Double maxFaveDate) {
            this.maxFaveDate = maxFaveDate;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetFavoritePhotosRequestBuilder
         */
        public GetFavoritePhotosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetFavoritePhotosRequestBuilder
         */
        public GetFavoritePhotosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getFavoritePhotos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFavoritePhotosCall(apiKey, userId, minFaveDate, maxFaveDate, page, perPage, _callback);
        }


        /**
         * Execute getFavoritePhotos request
         * @return PublicGetFavoritePhotosResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetFavoritePhotosResponse execute() throws ApiException {
            ApiResponse<PublicGetFavoritePhotosResponse> localVarResp = getFavoritePhotosWithHttpInfo(apiKey, userId, minFaveDate, maxFaveDate, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFavoritePhotos request with HTTP info returned
         * @return ApiResponse&lt;PublicGetFavoritePhotosResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetFavoritePhotosResponse> executeWithHttpInfo() throws ApiException {
            return getFavoritePhotosWithHttpInfo(apiKey, userId, minFaveDate, maxFaveDate, page, perPage);
        }

        /**
         * Execute getFavoritePhotos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetFavoritePhotosResponse> _callback) throws ApiException {
            return getFavoritePhotosAsync(apiKey, userId, minFaveDate, maxFaveDate, page, perPage, _callback);
        }
    }

    /**
     * 
     * Returns a list of the user&#39;s favorite photos. Only photos which the calling user has permission to see are returned.
     * @param apiKey  (required)
     * @param userId  (required)
     * @return GetFavoritePhotosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetFavoritePhotosRequestBuilder getFavoritePhotos(String apiKey, String userId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetFavoritePhotosRequestBuilder(apiKey, userId);
    }
    private okhttp3.Call getFavoritesContextCall(String apiKey, String photoId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.favorites.getContext";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (photoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_id", photoId));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoritesContextValidateBeforeCall(String apiKey, String photoId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getFavoritesContext(Async)");
        }

        // verify the required parameter 'photoId' is set
        if (photoId == null) {
            throw new ApiException("Missing the required parameter 'photoId' when calling getFavoritesContext(Async)");
        }

        return getFavoritesContextCall(apiKey, photoId, userId, _callback);

    }


    private ApiResponse<PublicGetFavoritesContextResponse> getFavoritesContextWithHttpInfo(String apiKey, String photoId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getFavoritesContextValidateBeforeCall(apiKey, photoId, userId, null);
        Type localVarReturnType = new TypeToken<PublicGetFavoritesContextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFavoritesContextAsync(String apiKey, String photoId, String userId, final ApiCallback<PublicGetFavoritesContextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoritesContextValidateBeforeCall(apiKey, photoId, userId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetFavoritesContextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFavoritesContextRequestBuilder {
        private final String apiKey;
        private final String photoId;
        private String userId;

        private GetFavoritesContextRequestBuilder(String apiKey, String photoId) {
            this.apiKey = apiKey;
            this.photoId = photoId;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return GetFavoritesContextRequestBuilder
         */
        public GetFavoritesContextRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Build call for getFavoritesContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFavoritesContextCall(apiKey, photoId, userId, _callback);
        }


        /**
         * Execute getFavoritesContext request
         * @return PublicGetFavoritesContextResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetFavoritesContextResponse execute() throws ApiException {
            ApiResponse<PublicGetFavoritesContextResponse> localVarResp = getFavoritesContextWithHttpInfo(apiKey, photoId, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFavoritesContext request with HTTP info returned
         * @return ApiResponse&lt;PublicGetFavoritesContextResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetFavoritesContextResponse> executeWithHttpInfo() throws ApiException {
            return getFavoritesContextWithHttpInfo(apiKey, photoId, userId);
        }

        /**
         * Execute getFavoritesContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetFavoritesContextResponse> _callback) throws ApiException {
            return getFavoritesContextAsync(apiKey, photoId, userId, _callback);
        }
    }

    /**
     * 
     * Returns next and previous favorites for a photo in a user&#39;s favorites
     * @param apiKey  (required)
     * @param photoId  (required)
     * @return GetFavoritesContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetFavoritesContextRequestBuilder getFavoritesContext(String apiKey, String photoId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photoId == null) throw new IllegalArgumentException("\"photoId\" is required but got null");
            

        return new GetFavoritesContextRequestBuilder(apiKey, photoId);
    }
    private okhttp3.Call getFlickrTestEchoCall(String apiKey, String echo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.test.echo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (echo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("echo", echo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlickrTestEchoValidateBeforeCall(String apiKey, String echo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getFlickrTestEcho(Async)");
        }

        return getFlickrTestEchoCall(apiKey, echo, _callback);

    }


    private ApiResponse<PublicGetFlickrTestEchoResponse> getFlickrTestEchoWithHttpInfo(String apiKey, String echo) throws ApiException {
        okhttp3.Call localVarCall = getFlickrTestEchoValidateBeforeCall(apiKey, echo, null);
        Type localVarReturnType = new TypeToken<PublicGetFlickrTestEchoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFlickrTestEchoAsync(String apiKey, String echo, final ApiCallback<PublicGetFlickrTestEchoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlickrTestEchoValidateBeforeCall(apiKey, echo, _callback);
        Type localVarReturnType = new TypeToken<PublicGetFlickrTestEchoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFlickrTestEchoRequestBuilder {
        private final String apiKey;
        private String echo;

        private GetFlickrTestEchoRequestBuilder(String apiKey) {
            this.apiKey = apiKey;
        }

        /**
         * Set echo
         * @param echo  (optional)
         * @return GetFlickrTestEchoRequestBuilder
         */
        public GetFlickrTestEchoRequestBuilder echo(String echo) {
            this.echo = echo;
            return this;
        }
        
        /**
         * Build call for getFlickrTestEcho
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFlickrTestEchoCall(apiKey, echo, _callback);
        }


        /**
         * Execute getFlickrTestEcho request
         * @return PublicGetFlickrTestEchoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetFlickrTestEchoResponse execute() throws ApiException {
            ApiResponse<PublicGetFlickrTestEchoResponse> localVarResp = getFlickrTestEchoWithHttpInfo(apiKey, echo);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFlickrTestEcho request with HTTP info returned
         * @return ApiResponse&lt;PublicGetFlickrTestEchoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetFlickrTestEchoResponse> executeWithHttpInfo() throws ApiException {
            return getFlickrTestEchoWithHttpInfo(apiKey, echo);
        }

        /**
         * Execute getFlickrTestEcho request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetFlickrTestEchoResponse> _callback) throws ApiException {
            return getFlickrTestEchoAsync(apiKey, echo, _callback);
        }
    }

    /**
     * 
     * Echos the input parameters back in the response
     * @param apiKey  (required)
     * @return GetFlickrTestEchoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetFlickrTestEchoRequestBuilder getFlickrTestEcho(String apiKey) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        return new GetFlickrTestEchoRequestBuilder(apiKey);
    }
    private okhttp3.Call getGalleryPhotosCall(String apiKey, String galleryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.galleries.getPhotos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (galleryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gallery_id", galleryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGalleryPhotosValidateBeforeCall(String apiKey, String galleryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getGalleryPhotos(Async)");
        }

        // verify the required parameter 'galleryId' is set
        if (galleryId == null) {
            throw new ApiException("Missing the required parameter 'galleryId' when calling getGalleryPhotos(Async)");
        }

        return getGalleryPhotosCall(apiKey, galleryId, _callback);

    }


    private ApiResponse<PublicGetGalleryPhotosResponse> getGalleryPhotosWithHttpInfo(String apiKey, String galleryId) throws ApiException {
        okhttp3.Call localVarCall = getGalleryPhotosValidateBeforeCall(apiKey, galleryId, null);
        Type localVarReturnType = new TypeToken<PublicGetGalleryPhotosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGalleryPhotosAsync(String apiKey, String galleryId, final ApiCallback<PublicGetGalleryPhotosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGalleryPhotosValidateBeforeCall(apiKey, galleryId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetGalleryPhotosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGalleryPhotosRequestBuilder {
        private final String apiKey;
        private final String galleryId;

        private GetGalleryPhotosRequestBuilder(String apiKey, String galleryId) {
            this.apiKey = apiKey;
            this.galleryId = galleryId;
        }

        /**
         * Build call for getGalleryPhotos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGalleryPhotosCall(apiKey, galleryId, _callback);
        }


        /**
         * Execute getGalleryPhotos request
         * @return PublicGetGalleryPhotosResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetGalleryPhotosResponse execute() throws ApiException {
            ApiResponse<PublicGetGalleryPhotosResponse> localVarResp = getGalleryPhotosWithHttpInfo(apiKey, galleryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGalleryPhotos request with HTTP info returned
         * @return ApiResponse&lt;PublicGetGalleryPhotosResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetGalleryPhotosResponse> executeWithHttpInfo() throws ApiException {
            return getGalleryPhotosWithHttpInfo(apiKey, galleryId);
        }

        /**
         * Execute getGalleryPhotos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetGalleryPhotosResponse> _callback) throws ApiException {
            return getGalleryPhotosAsync(apiKey, galleryId, _callback);
        }
    }

    /**
     * 
     * Returns a list of photos in a gallery.
     * @param apiKey  (required)
     * @param galleryId  (required)
     * @return GetGalleryPhotosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetGalleryPhotosRequestBuilder getGalleryPhotos(String apiKey, String galleryId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (galleryId == null) throw new IllegalArgumentException("\"galleryId\" is required but got null");
            

        return new GetGalleryPhotosRequestBuilder(apiKey, galleryId);
    }
    private okhttp3.Call getGroupDiscussionTopicsCall(String apiKey, String groupId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.groups.discuss.topics.getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupDiscussionTopicsValidateBeforeCall(String apiKey, String groupId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getGroupDiscussionTopics(Async)");
        }

        return getGroupDiscussionTopicsCall(apiKey, groupId, page, perPage, _callback);

    }


    private ApiResponse<PublicGetGroupDiscussionTopicsResponse> getGroupDiscussionTopicsWithHttpInfo(String apiKey, String groupId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getGroupDiscussionTopicsValidateBeforeCall(apiKey, groupId, page, perPage, null);
        Type localVarReturnType = new TypeToken<PublicGetGroupDiscussionTopicsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupDiscussionTopicsAsync(String apiKey, String groupId, Double page, Double perPage, final ApiCallback<PublicGetGroupDiscussionTopicsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupDiscussionTopicsValidateBeforeCall(apiKey, groupId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PublicGetGroupDiscussionTopicsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupDiscussionTopicsRequestBuilder {
        private final String apiKey;
        private String groupId;
        private Double page;
        private Double perPage;

        private GetGroupDiscussionTopicsRequestBuilder(String apiKey) {
            this.apiKey = apiKey;
        }

        /**
         * Set groupId
         * @param groupId  (optional)
         * @return GetGroupDiscussionTopicsRequestBuilder
         */
        public GetGroupDiscussionTopicsRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetGroupDiscussionTopicsRequestBuilder
         */
        public GetGroupDiscussionTopicsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetGroupDiscussionTopicsRequestBuilder
         */
        public GetGroupDiscussionTopicsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getGroupDiscussionTopics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupDiscussionTopicsCall(apiKey, groupId, page, perPage, _callback);
        }


        /**
         * Execute getGroupDiscussionTopics request
         * @return PublicGetGroupDiscussionTopicsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetGroupDiscussionTopicsResponse execute() throws ApiException {
            ApiResponse<PublicGetGroupDiscussionTopicsResponse> localVarResp = getGroupDiscussionTopicsWithHttpInfo(apiKey, groupId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupDiscussionTopics request with HTTP info returned
         * @return ApiResponse&lt;PublicGetGroupDiscussionTopicsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetGroupDiscussionTopicsResponse> executeWithHttpInfo() throws ApiException {
            return getGroupDiscussionTopicsWithHttpInfo(apiKey, groupId, page, perPage);
        }

        /**
         * Execute getGroupDiscussionTopics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetGroupDiscussionTopicsResponse> _callback) throws ApiException {
            return getGroupDiscussionTopicsAsync(apiKey, groupId, page, perPage, _callback);
        }
    }

    /**
     * 
     * Get a list of discussion topics in a group.
     * @param apiKey  (required)
     * @return GetGroupDiscussionTopicsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupDiscussionTopicsRequestBuilder getGroupDiscussionTopics(String apiKey) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        return new GetGroupDiscussionTopicsRequestBuilder(apiKey);
    }
    private okhttp3.Call getGroupInfoCall(String apiKey, String groupId, String groupPathAlias, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.groups.getInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (groupPathAlias != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_path_alias", groupPathAlias));
        }

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupInfoValidateBeforeCall(String apiKey, String groupId, String groupPathAlias, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getGroupInfo(Async)");
        }

        return getGroupInfoCall(apiKey, groupId, groupPathAlias, lang, _callback);

    }


    private ApiResponse<PublicGetGroupInfoResponse> getGroupInfoWithHttpInfo(String apiKey, String groupId, String groupPathAlias, String lang) throws ApiException {
        okhttp3.Call localVarCall = getGroupInfoValidateBeforeCall(apiKey, groupId, groupPathAlias, lang, null);
        Type localVarReturnType = new TypeToken<PublicGetGroupInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupInfoAsync(String apiKey, String groupId, String groupPathAlias, String lang, final ApiCallback<PublicGetGroupInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupInfoValidateBeforeCall(apiKey, groupId, groupPathAlias, lang, _callback);
        Type localVarReturnType = new TypeToken<PublicGetGroupInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupInfoRequestBuilder {
        private final String apiKey;
        private String groupId;
        private String groupPathAlias;
        private String lang;

        private GetGroupInfoRequestBuilder(String apiKey) {
            this.apiKey = apiKey;
        }

        /**
         * Set groupId
         * @param groupId  (optional)
         * @return GetGroupInfoRequestBuilder
         */
        public GetGroupInfoRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set groupPathAlias
         * @param groupPathAlias  (optional)
         * @return GetGroupInfoRequestBuilder
         */
        public GetGroupInfoRequestBuilder groupPathAlias(String groupPathAlias) {
            this.groupPathAlias = groupPathAlias;
            return this;
        }
        
        /**
         * Set lang
         * @param lang  (optional)
         * @return GetGroupInfoRequestBuilder
         */
        public GetGroupInfoRequestBuilder lang(String lang) {
            this.lang = lang;
            return this;
        }
        
        /**
         * Build call for getGroupInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupInfoCall(apiKey, groupId, groupPathAlias, lang, _callback);
        }


        /**
         * Execute getGroupInfo request
         * @return PublicGetGroupInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetGroupInfoResponse execute() throws ApiException {
            ApiResponse<PublicGetGroupInfoResponse> localVarResp = getGroupInfoWithHttpInfo(apiKey, groupId, groupPathAlias, lang);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupInfo request with HTTP info returned
         * @return ApiResponse&lt;PublicGetGroupInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetGroupInfoResponse> executeWithHttpInfo() throws ApiException {
            return getGroupInfoWithHttpInfo(apiKey, groupId, groupPathAlias, lang);
        }

        /**
         * Execute getGroupInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetGroupInfoResponse> _callback) throws ApiException {
            return getGroupInfoAsync(apiKey, groupId, groupPathAlias, lang, _callback);
        }
    }

    /**
     * 
     * Get information about a group
     * @param apiKey  (required)
     * @return GetGroupInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupInfoRequestBuilder getGroupInfo(String apiKey) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        return new GetGroupInfoRequestBuilder(apiKey);
    }
    private okhttp3.Call getGroupPoolPhotosCall(String apiKey, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.groups.pools.getPhotos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupPoolPhotosValidateBeforeCall(String apiKey, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getGroupPoolPhotos(Async)");
        }

        return getGroupPoolPhotosCall(apiKey, groupId, _callback);

    }


    private ApiResponse<PublicGetGroupPoolPhotosResponse> getGroupPoolPhotosWithHttpInfo(String apiKey, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupPoolPhotosValidateBeforeCall(apiKey, groupId, null);
        Type localVarReturnType = new TypeToken<PublicGetGroupPoolPhotosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupPoolPhotosAsync(String apiKey, String groupId, final ApiCallback<PublicGetGroupPoolPhotosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupPoolPhotosValidateBeforeCall(apiKey, groupId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetGroupPoolPhotosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupPoolPhotosRequestBuilder {
        private final String apiKey;
        private String groupId;

        private GetGroupPoolPhotosRequestBuilder(String apiKey) {
            this.apiKey = apiKey;
        }

        /**
         * Set groupId
         * @param groupId  (optional)
         * @return GetGroupPoolPhotosRequestBuilder
         */
        public GetGroupPoolPhotosRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for getGroupPoolPhotos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupPoolPhotosCall(apiKey, groupId, _callback);
        }


        /**
         * Execute getGroupPoolPhotos request
         * @return PublicGetGroupPoolPhotosResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetGroupPoolPhotosResponse execute() throws ApiException {
            ApiResponse<PublicGetGroupPoolPhotosResponse> localVarResp = getGroupPoolPhotosWithHttpInfo(apiKey, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupPoolPhotos request with HTTP info returned
         * @return ApiResponse&lt;PublicGetGroupPoolPhotosResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetGroupPoolPhotosResponse> executeWithHttpInfo() throws ApiException {
            return getGroupPoolPhotosWithHttpInfo(apiKey, groupId);
        }

        /**
         * Execute getGroupPoolPhotos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetGroupPoolPhotosResponse> _callback) throws ApiException {
            return getGroupPoolPhotosAsync(apiKey, groupId, _callback);
        }
    }

    /**
     * 
     * Returns a list of pool photos for a given group
     * @param apiKey  (required)
     * @return GetGroupPoolPhotosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupPoolPhotosRequestBuilder getGroupPoolPhotos(String apiKey) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        return new GetGroupPoolPhotosRequestBuilder(apiKey);
    }
    private okhttp3.Call getGroupTopicInfoCall(String apiKey, String topicId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.groups.discuss.topics.getInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (topicId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topic_id", topicId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupTopicInfoValidateBeforeCall(String apiKey, String topicId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getGroupTopicInfo(Async)");
        }

        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling getGroupTopicInfo(Async)");
        }

        return getGroupTopicInfoCall(apiKey, topicId, groupId, _callback);

    }


    private ApiResponse<PublicGetGroupTopicInfoResponse> getGroupTopicInfoWithHttpInfo(String apiKey, String topicId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupTopicInfoValidateBeforeCall(apiKey, topicId, groupId, null);
        Type localVarReturnType = new TypeToken<PublicGetGroupTopicInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupTopicInfoAsync(String apiKey, String topicId, String groupId, final ApiCallback<PublicGetGroupTopicInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupTopicInfoValidateBeforeCall(apiKey, topicId, groupId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetGroupTopicInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupTopicInfoRequestBuilder {
        private final String apiKey;
        private final String topicId;
        private String groupId;

        private GetGroupTopicInfoRequestBuilder(String apiKey, String topicId) {
            this.apiKey = apiKey;
            this.topicId = topicId;
        }

        /**
         * Set groupId
         * @param groupId  (optional)
         * @return GetGroupTopicInfoRequestBuilder
         */
        public GetGroupTopicInfoRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for getGroupTopicInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupTopicInfoCall(apiKey, topicId, groupId, _callback);
        }


        /**
         * Execute getGroupTopicInfo request
         * @return PublicGetGroupTopicInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetGroupTopicInfoResponse execute() throws ApiException {
            ApiResponse<PublicGetGroupTopicInfoResponse> localVarResp = getGroupTopicInfoWithHttpInfo(apiKey, topicId, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupTopicInfo request with HTTP info returned
         * @return ApiResponse&lt;PublicGetGroupTopicInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetGroupTopicInfoResponse> executeWithHttpInfo() throws ApiException {
            return getGroupTopicInfoWithHttpInfo(apiKey, topicId, groupId);
        }

        /**
         * Execute getGroupTopicInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetGroupTopicInfoResponse> _callback) throws ApiException {
            return getGroupTopicInfoAsync(apiKey, topicId, groupId, _callback);
        }
    }

    /**
     * 
     * Get information about a group discussion topic
     * @param apiKey  (required)
     * @param topicId  (required)
     * @return GetGroupTopicInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupTopicInfoRequestBuilder getGroupTopicInfo(String apiKey, String topicId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (topicId == null) throw new IllegalArgumentException("\"topicId\" is required but got null");
            

        return new GetGroupTopicInfoRequestBuilder(apiKey, topicId);
    }
    private okhttp3.Call getGroupTopicRepliesInfoCall(String apiKey, String topicId, String replyId, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.groups.discuss.replies.getInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (topicId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topic_id", topicId));
        }

        if (replyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reply_id", replyId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupTopicRepliesInfoValidateBeforeCall(String apiKey, String topicId, String replyId, String groupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getGroupTopicRepliesInfo(Async)");
        }

        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling getGroupTopicRepliesInfo(Async)");
        }

        // verify the required parameter 'replyId' is set
        if (replyId == null) {
            throw new ApiException("Missing the required parameter 'replyId' when calling getGroupTopicRepliesInfo(Async)");
        }

        return getGroupTopicRepliesInfoCall(apiKey, topicId, replyId, groupId, _callback);

    }


    private ApiResponse<PublicGetGroupTopicRepliesInfoResponse> getGroupTopicRepliesInfoWithHttpInfo(String apiKey, String topicId, String replyId, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupTopicRepliesInfoValidateBeforeCall(apiKey, topicId, replyId, groupId, null);
        Type localVarReturnType = new TypeToken<PublicGetGroupTopicRepliesInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupTopicRepliesInfoAsync(String apiKey, String topicId, String replyId, String groupId, final ApiCallback<PublicGetGroupTopicRepliesInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupTopicRepliesInfoValidateBeforeCall(apiKey, topicId, replyId, groupId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetGroupTopicRepliesInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupTopicRepliesInfoRequestBuilder {
        private final String apiKey;
        private final String topicId;
        private final String replyId;
        private String groupId;

        private GetGroupTopicRepliesInfoRequestBuilder(String apiKey, String topicId, String replyId) {
            this.apiKey = apiKey;
            this.topicId = topicId;
            this.replyId = replyId;
        }

        /**
         * Set groupId
         * @param groupId  (optional)
         * @return GetGroupTopicRepliesInfoRequestBuilder
         */
        public GetGroupTopicRepliesInfoRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Build call for getGroupTopicRepliesInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupTopicRepliesInfoCall(apiKey, topicId, replyId, groupId, _callback);
        }


        /**
         * Execute getGroupTopicRepliesInfo request
         * @return PublicGetGroupTopicRepliesInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetGroupTopicRepliesInfoResponse execute() throws ApiException {
            ApiResponse<PublicGetGroupTopicRepliesInfoResponse> localVarResp = getGroupTopicRepliesInfoWithHttpInfo(apiKey, topicId, replyId, groupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupTopicRepliesInfo request with HTTP info returned
         * @return ApiResponse&lt;PublicGetGroupTopicRepliesInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetGroupTopicRepliesInfoResponse> executeWithHttpInfo() throws ApiException {
            return getGroupTopicRepliesInfoWithHttpInfo(apiKey, topicId, replyId, groupId);
        }

        /**
         * Execute getGroupTopicRepliesInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetGroupTopicRepliesInfoResponse> _callback) throws ApiException {
            return getGroupTopicRepliesInfoAsync(apiKey, topicId, replyId, groupId, _callback);
        }
    }

    /**
     * 
     * Get information on a group topic reply
     * @param apiKey  (required)
     * @param topicId  (required)
     * @param replyId  (required)
     * @return GetGroupTopicRepliesInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupTopicRepliesInfoRequestBuilder getGroupTopicRepliesInfo(String apiKey, String topicId, String replyId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (topicId == null) throw new IllegalArgumentException("\"topicId\" is required but got null");
            

        if (replyId == null) throw new IllegalArgumentException("\"replyId\" is required but got null");
            

        return new GetGroupTopicRepliesInfoRequestBuilder(apiKey, topicId, replyId);
    }
    private okhttp3.Call getOAuthTokenCall(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/request_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oauthConsumerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_consumer_key", oauthConsumerKey));
        }

        if (oauthNonce != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_nonce", oauthNonce));
        }

        if (oauthTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_timestamp", oauthTimestamp));
        }

        if (oauthSignatureMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature_method", oauthSignatureMethod));
        }

        if (oauthVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_version", oauthVersion));
        }

        if (oauthSignature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_signature", oauthSignature));
        }

        if (oauthCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_callback", oauthCallback));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOAuthTokenValidateBeforeCall(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'oauthConsumerKey' is set
        if (oauthConsumerKey == null) {
            throw new ApiException("Missing the required parameter 'oauthConsumerKey' when calling getOAuthToken(Async)");
        }

        // verify the required parameter 'oauthNonce' is set
        if (oauthNonce == null) {
            throw new ApiException("Missing the required parameter 'oauthNonce' when calling getOAuthToken(Async)");
        }

        // verify the required parameter 'oauthTimestamp' is set
        if (oauthTimestamp == null) {
            throw new ApiException("Missing the required parameter 'oauthTimestamp' when calling getOAuthToken(Async)");
        }

        // verify the required parameter 'oauthSignatureMethod' is set
        if (oauthSignatureMethod == null) {
            throw new ApiException("Missing the required parameter 'oauthSignatureMethod' when calling getOAuthToken(Async)");
        }

        // verify the required parameter 'oauthVersion' is set
        if (oauthVersion == null) {
            throw new ApiException("Missing the required parameter 'oauthVersion' when calling getOAuthToken(Async)");
        }

        // verify the required parameter 'oauthSignature' is set
        if (oauthSignature == null) {
            throw new ApiException("Missing the required parameter 'oauthSignature' when calling getOAuthToken(Async)");
        }

        // verify the required parameter 'oauthCallback' is set
        if (oauthCallback == null) {
            throw new ApiException("Missing the required parameter 'oauthCallback' when calling getOAuthToken(Async)");
        }

        return getOAuthTokenCall(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback, _callback);

    }


    private ApiResponse<String> getOAuthTokenWithHttpInfo(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthCallback) throws ApiException {
        okhttp3.Call localVarCall = getOAuthTokenValidateBeforeCall(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOAuthTokenAsync(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthCallback, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOAuthTokenValidateBeforeCall(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOAuthTokenRequestBuilder {
        private final String oauthConsumerKey;
        private final String oauthNonce;
        private final String oauthTimestamp;
        private final String oauthSignatureMethod;
        private final String oauthVersion;
        private final String oauthSignature;
        private final String oauthCallback;

        private GetOAuthTokenRequestBuilder(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthCallback) {
            this.oauthConsumerKey = oauthConsumerKey;
            this.oauthNonce = oauthNonce;
            this.oauthTimestamp = oauthTimestamp;
            this.oauthSignatureMethod = oauthSignatureMethod;
            this.oauthVersion = oauthVersion;
            this.oauthSignature = oauthSignature;
            this.oauthCallback = oauthCallback;
        }

        /**
         * Build call for getOAuthToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOAuthTokenCall(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback, _callback);
        }


        /**
         * Execute getOAuthToken request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getOAuthTokenWithHttpInfo(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOAuthToken request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getOAuthTokenWithHttpInfo(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback);
        }

        /**
         * Execute getOAuthToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getOAuthTokenAsync(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback, _callback);
        }
    }

    /**
     * 
     * Returns an oauth token and oauth token secret
     * @param oauthConsumerKey  (required)
     * @param oauthNonce  (required)
     * @param oauthTimestamp  (required)
     * @param oauthSignatureMethod  (required)
     * @param oauthVersion  (required)
     * @param oauthSignature  (required)
     * @param oauthCallback  (required)
     * @return GetOAuthTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetOAuthTokenRequestBuilder getOAuthToken(String oauthConsumerKey, String oauthNonce, String oauthTimestamp, String oauthSignatureMethod, String oauthVersion, String oauthSignature, String oauthCallback) throws IllegalArgumentException {
        if (oauthConsumerKey == null) throw new IllegalArgumentException("\"oauthConsumerKey\" is required but got null");
            

        if (oauthNonce == null) throw new IllegalArgumentException("\"oauthNonce\" is required but got null");
            

        if (oauthTimestamp == null) throw new IllegalArgumentException("\"oauthTimestamp\" is required but got null");
            

        if (oauthSignatureMethod == null) throw new IllegalArgumentException("\"oauthSignatureMethod\" is required but got null");
            

        if (oauthVersion == null) throw new IllegalArgumentException("\"oauthVersion\" is required but got null");
            

        if (oauthSignature == null) throw new IllegalArgumentException("\"oauthSignature\" is required but got null");
            

        if (oauthCallback == null) throw new IllegalArgumentException("\"oauthCallback\" is required but got null");
            

        return new GetOAuthTokenRequestBuilder(oauthConsumerKey, oauthNonce, oauthTimestamp, oauthSignatureMethod, oauthVersion, oauthSignature, oauthCallback);
    }
    private okhttp3.Call getPersonInformationCall(String apiKey, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.people.getInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonInformationValidateBeforeCall(String apiKey, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getPersonInformation(Async)");
        }

        return getPersonInformationCall(apiKey, userId, _callback);

    }


    private ApiResponse<PublicGetPersonInformationResponse> getPersonInformationWithHttpInfo(String apiKey, String userId) throws ApiException {
        okhttp3.Call localVarCall = getPersonInformationValidateBeforeCall(apiKey, userId, null);
        Type localVarReturnType = new TypeToken<PublicGetPersonInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonInformationAsync(String apiKey, String userId, final ApiCallback<PublicGetPersonInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonInformationValidateBeforeCall(apiKey, userId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetPersonInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonInformationRequestBuilder {
        private final String apiKey;
        private String userId;

        private GetPersonInformationRequestBuilder(String apiKey) {
            this.apiKey = apiKey;
        }

        /**
         * Set userId
         * @param userId  (optional)
         * @return GetPersonInformationRequestBuilder
         */
        public GetPersonInformationRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Build call for getPersonInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonInformationCall(apiKey, userId, _callback);
        }


        /**
         * Execute getPersonInformation request
         * @return PublicGetPersonInformationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetPersonInformationResponse execute() throws ApiException {
            ApiResponse<PublicGetPersonInformationResponse> localVarResp = getPersonInformationWithHttpInfo(apiKey, userId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonInformation request with HTTP info returned
         * @return ApiResponse&lt;PublicGetPersonInformationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetPersonInformationResponse> executeWithHttpInfo() throws ApiException {
            return getPersonInformationWithHttpInfo(apiKey, userId);
        }

        /**
         * Execute getPersonInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetPersonInformationResponse> _callback) throws ApiException {
            return getPersonInformationAsync(apiKey, userId, _callback);
        }
    }

    /**
     * 
     * Returns a person
     * @param apiKey  (required)
     * @return GetPersonInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonInformationRequestBuilder getPersonInformation(String apiKey) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        return new GetPersonInformationRequestBuilder(apiKey);
    }
    private okhttp3.Call getPhotoExifCall(String apiKey, String photoId, String secret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photos.getExif";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (photoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_id", photoId));
        }

        if (secret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret", secret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhotoExifValidateBeforeCall(String apiKey, String photoId, String secret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getPhotoExif(Async)");
        }

        // verify the required parameter 'photoId' is set
        if (photoId == null) {
            throw new ApiException("Missing the required parameter 'photoId' when calling getPhotoExif(Async)");
        }

        return getPhotoExifCall(apiKey, photoId, secret, _callback);

    }


    private ApiResponse<PublicGetPhotoExifResponse> getPhotoExifWithHttpInfo(String apiKey, String photoId, String secret) throws ApiException {
        okhttp3.Call localVarCall = getPhotoExifValidateBeforeCall(apiKey, photoId, secret, null);
        Type localVarReturnType = new TypeToken<PublicGetPhotoExifResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhotoExifAsync(String apiKey, String photoId, String secret, final ApiCallback<PublicGetPhotoExifResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhotoExifValidateBeforeCall(apiKey, photoId, secret, _callback);
        Type localVarReturnType = new TypeToken<PublicGetPhotoExifResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPhotoExifRequestBuilder {
        private final String apiKey;
        private final String photoId;
        private String secret;

        private GetPhotoExifRequestBuilder(String apiKey, String photoId) {
            this.apiKey = apiKey;
            this.photoId = photoId;
        }

        /**
         * Set secret
         * @param secret  (optional)
         * @return GetPhotoExifRequestBuilder
         */
        public GetPhotoExifRequestBuilder secret(String secret) {
            this.secret = secret;
            return this;
        }
        
        /**
         * Build call for getPhotoExif
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhotoExifCall(apiKey, photoId, secret, _callback);
        }


        /**
         * Execute getPhotoExif request
         * @return PublicGetPhotoExifResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetPhotoExifResponse execute() throws ApiException {
            ApiResponse<PublicGetPhotoExifResponse> localVarResp = getPhotoExifWithHttpInfo(apiKey, photoId, secret);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPhotoExif request with HTTP info returned
         * @return ApiResponse&lt;PublicGetPhotoExifResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetPhotoExifResponse> executeWithHttpInfo() throws ApiException {
            return getPhotoExifWithHttpInfo(apiKey, photoId, secret);
        }

        /**
         * Execute getPhotoExif request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetPhotoExifResponse> _callback) throws ApiException {
            return getPhotoExifAsync(apiKey, photoId, secret, _callback);
        }
    }

    /**
     * 
     * Retrieves a list of EXIF/TIFF/GPS tags for a given photo. The calling user must have permission to view the photo.
     * @param apiKey  (required)
     * @param photoId  (required)
     * @return GetPhotoExifRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPhotoExifRequestBuilder getPhotoExif(String apiKey, String photoId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photoId == null) throw new IllegalArgumentException("\"photoId\" is required but got null");
            

        return new GetPhotoExifRequestBuilder(apiKey, photoId);
    }
    private okhttp3.Call getPhotoInfoCall(String apiKey, String photoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photos.getInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (photoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_id", photoId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhotoInfoValidateBeforeCall(String apiKey, String photoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getPhotoInfo(Async)");
        }

        // verify the required parameter 'photoId' is set
        if (photoId == null) {
            throw new ApiException("Missing the required parameter 'photoId' when calling getPhotoInfo(Async)");
        }

        return getPhotoInfoCall(apiKey, photoId, _callback);

    }


    private ApiResponse<PublicGetPhotoInfoResponse> getPhotoInfoWithHttpInfo(String apiKey, String photoId) throws ApiException {
        okhttp3.Call localVarCall = getPhotoInfoValidateBeforeCall(apiKey, photoId, null);
        Type localVarReturnType = new TypeToken<PublicGetPhotoInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhotoInfoAsync(String apiKey, String photoId, final ApiCallback<PublicGetPhotoInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhotoInfoValidateBeforeCall(apiKey, photoId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetPhotoInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPhotoInfoRequestBuilder {
        private final String apiKey;
        private final String photoId;

        private GetPhotoInfoRequestBuilder(String apiKey, String photoId) {
            this.apiKey = apiKey;
            this.photoId = photoId;
        }

        /**
         * Build call for getPhotoInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> a photo </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhotoInfoCall(apiKey, photoId, _callback);
        }


        /**
         * Execute getPhotoInfo request
         * @return PublicGetPhotoInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> a photo </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetPhotoInfoResponse execute() throws ApiException {
            ApiResponse<PublicGetPhotoInfoResponse> localVarResp = getPhotoInfoWithHttpInfo(apiKey, photoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPhotoInfo request with HTTP info returned
         * @return ApiResponse&lt;PublicGetPhotoInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> a photo </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetPhotoInfoResponse> executeWithHttpInfo() throws ApiException {
            return getPhotoInfoWithHttpInfo(apiKey, photoId);
        }

        /**
         * Execute getPhotoInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> a photo </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetPhotoInfoResponse> _callback) throws ApiException {
            return getPhotoInfoAsync(apiKey, photoId, _callback);
        }
    }

    /**
     * 
     * Returns a photo
     * @param apiKey  (required)
     * @param photoId  (required)
     * @return GetPhotoInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a photo </td><td>  -  </td></tr>
     </table>
     */
    public GetPhotoInfoRequestBuilder getPhotoInfo(String apiKey, String photoId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photoId == null) throw new IllegalArgumentException("\"photoId\" is required but got null");
            

        return new GetPhotoInfoRequestBuilder(apiKey, photoId);
    }
    private okhttp3.Call getPhotoLicensesCall(String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photos.licenses.getInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhotoLicensesValidateBeforeCall(String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getPhotoLicenses(Async)");
        }

        return getPhotoLicensesCall(apiKey, _callback);

    }


    private ApiResponse<PublicGetPhotoLicensesResponse> getPhotoLicensesWithHttpInfo(String apiKey) throws ApiException {
        okhttp3.Call localVarCall = getPhotoLicensesValidateBeforeCall(apiKey, null);
        Type localVarReturnType = new TypeToken<PublicGetPhotoLicensesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhotoLicensesAsync(String apiKey, final ApiCallback<PublicGetPhotoLicensesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhotoLicensesValidateBeforeCall(apiKey, _callback);
        Type localVarReturnType = new TypeToken<PublicGetPhotoLicensesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPhotoLicensesRequestBuilder {
        private final String apiKey;

        private GetPhotoLicensesRequestBuilder(String apiKey) {
            this.apiKey = apiKey;
        }

        /**
         * Build call for getPhotoLicenses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhotoLicensesCall(apiKey, _callback);
        }


        /**
         * Execute getPhotoLicenses request
         * @return PublicGetPhotoLicensesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetPhotoLicensesResponse execute() throws ApiException {
            ApiResponse<PublicGetPhotoLicensesResponse> localVarResp = getPhotoLicensesWithHttpInfo(apiKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPhotoLicenses request with HTTP info returned
         * @return ApiResponse&lt;PublicGetPhotoLicensesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetPhotoLicensesResponse> executeWithHttpInfo() throws ApiException {
            return getPhotoLicensesWithHttpInfo(apiKey);
        }

        /**
         * Execute getPhotoLicenses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetPhotoLicensesResponse> _callback) throws ApiException {
            return getPhotoLicensesAsync(apiKey, _callback);
        }
    }

    /**
     * 
     * Fetches a list of available photo licenses for Flickr
     * @param apiKey  (required)
     * @return GetPhotoLicensesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPhotoLicensesRequestBuilder getPhotoLicenses(String apiKey) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        return new GetPhotoLicensesRequestBuilder(apiKey);
    }
    private okhttp3.Call getPhotoListContextCall(String apiKey, String photoId, String photolistId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photolist.getContext";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (photoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_id", photoId));
        }

        if (photolistId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photolist_id", photolistId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhotoListContextValidateBeforeCall(String apiKey, String photoId, String photolistId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getPhotoListContext(Async)");
        }

        // verify the required parameter 'photoId' is set
        if (photoId == null) {
            throw new ApiException("Missing the required parameter 'photoId' when calling getPhotoListContext(Async)");
        }

        // verify the required parameter 'photolistId' is set
        if (photolistId == null) {
            throw new ApiException("Missing the required parameter 'photolistId' when calling getPhotoListContext(Async)");
        }

        return getPhotoListContextCall(apiKey, photoId, photolistId, _callback);

    }


    private ApiResponse<PublicGetPhotoListContextResponse> getPhotoListContextWithHttpInfo(String apiKey, String photoId, String photolistId) throws ApiException {
        okhttp3.Call localVarCall = getPhotoListContextValidateBeforeCall(apiKey, photoId, photolistId, null);
        Type localVarReturnType = new TypeToken<PublicGetPhotoListContextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhotoListContextAsync(String apiKey, String photoId, String photolistId, final ApiCallback<PublicGetPhotoListContextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhotoListContextValidateBeforeCall(apiKey, photoId, photolistId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetPhotoListContextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPhotoListContextRequestBuilder {
        private final String apiKey;
        private final String photoId;
        private final String photolistId;

        private GetPhotoListContextRequestBuilder(String apiKey, String photoId, String photolistId) {
            this.apiKey = apiKey;
            this.photoId = photoId;
            this.photolistId = photolistId;
        }

        /**
         * Build call for getPhotoListContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhotoListContextCall(apiKey, photoId, photolistId, _callback);
        }


        /**
         * Execute getPhotoListContext request
         * @return PublicGetPhotoListContextResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetPhotoListContextResponse execute() throws ApiException {
            ApiResponse<PublicGetPhotoListContextResponse> localVarResp = getPhotoListContextWithHttpInfo(apiKey, photoId, photolistId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPhotoListContext request with HTTP info returned
         * @return ApiResponse&lt;PublicGetPhotoListContextResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetPhotoListContextResponse> executeWithHttpInfo() throws ApiException {
            return getPhotoListContextWithHttpInfo(apiKey, photoId, photolistId);
        }

        /**
         * Execute getPhotoListContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetPhotoListContextResponse> _callback) throws ApiException {
            return getPhotoListContextAsync(apiKey, photoId, photolistId, _callback);
        }
    }

    /**
     * 
     * Returns next and previous photos in a photo list
     * @param apiKey  (required)
     * @param photoId  (required)
     * @param photolistId  (required)
     * @return GetPhotoListContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPhotoListContextRequestBuilder getPhotoListContext(String apiKey, String photoId, String photolistId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photoId == null) throw new IllegalArgumentException("\"photoId\" is required but got null");
            

        if (photolistId == null) throw new IllegalArgumentException("\"photolistId\" is required but got null");
            

        return new GetPhotoListContextRequestBuilder(apiKey, photoId, photolistId);
    }
    private okhttp3.Call getPhotoSetContextCall(String apiKey, String photoId, String photosetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photosets.getContext";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (photoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_id", photoId));
        }

        if (photosetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photoset_id", photosetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhotoSetContextValidateBeforeCall(String apiKey, String photoId, String photosetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getPhotoSetContext(Async)");
        }

        // verify the required parameter 'photoId' is set
        if (photoId == null) {
            throw new ApiException("Missing the required parameter 'photoId' when calling getPhotoSetContext(Async)");
        }

        return getPhotoSetContextCall(apiKey, photoId, photosetId, _callback);

    }


    private ApiResponse<PublicGetPhotoSetContextResponse> getPhotoSetContextWithHttpInfo(String apiKey, String photoId, String photosetId) throws ApiException {
        okhttp3.Call localVarCall = getPhotoSetContextValidateBeforeCall(apiKey, photoId, photosetId, null);
        Type localVarReturnType = new TypeToken<PublicGetPhotoSetContextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhotoSetContextAsync(String apiKey, String photoId, String photosetId, final ApiCallback<PublicGetPhotoSetContextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhotoSetContextValidateBeforeCall(apiKey, photoId, photosetId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetPhotoSetContextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPhotoSetContextRequestBuilder {
        private final String apiKey;
        private final String photoId;
        private String photosetId;

        private GetPhotoSetContextRequestBuilder(String apiKey, String photoId) {
            this.apiKey = apiKey;
            this.photoId = photoId;
        }

        /**
         * Set photosetId
         * @param photosetId  (optional)
         * @return GetPhotoSetContextRequestBuilder
         */
        public GetPhotoSetContextRequestBuilder photosetId(String photosetId) {
            this.photosetId = photosetId;
            return this;
        }
        
        /**
         * Build call for getPhotoSetContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhotoSetContextCall(apiKey, photoId, photosetId, _callback);
        }


        /**
         * Execute getPhotoSetContext request
         * @return PublicGetPhotoSetContextResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetPhotoSetContextResponse execute() throws ApiException {
            ApiResponse<PublicGetPhotoSetContextResponse> localVarResp = getPhotoSetContextWithHttpInfo(apiKey, photoId, photosetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPhotoSetContext request with HTTP info returned
         * @return ApiResponse&lt;PublicGetPhotoSetContextResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetPhotoSetContextResponse> executeWithHttpInfo() throws ApiException {
            return getPhotoSetContextWithHttpInfo(apiKey, photoId, photosetId);
        }

        /**
         * Execute getPhotoSetContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetPhotoSetContextResponse> _callback) throws ApiException {
            return getPhotoSetContextAsync(apiKey, photoId, photosetId, _callback);
        }
    }

    /**
     * 
     * Returns next and previous photos for a photo in a set
     * @param apiKey  (required)
     * @param photoId  (required)
     * @return GetPhotoSetContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPhotoSetContextRequestBuilder getPhotoSetContext(String apiKey, String photoId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photoId == null) throw new IllegalArgumentException("\"photoId\" is required but got null");
            

        return new GetPhotoSetContextRequestBuilder(apiKey, photoId);
    }
    private okhttp3.Call getPhotoSizesCall(String apiKey, String photoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photos.getSizes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (photoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_id", photoId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhotoSizesValidateBeforeCall(String apiKey, String photoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getPhotoSizes(Async)");
        }

        // verify the required parameter 'photoId' is set
        if (photoId == null) {
            throw new ApiException("Missing the required parameter 'photoId' when calling getPhotoSizes(Async)");
        }

        return getPhotoSizesCall(apiKey, photoId, _callback);

    }


    private ApiResponse<PublicGetPhotoSizesResponse> getPhotoSizesWithHttpInfo(String apiKey, String photoId) throws ApiException {
        okhttp3.Call localVarCall = getPhotoSizesValidateBeforeCall(apiKey, photoId, null);
        Type localVarReturnType = new TypeToken<PublicGetPhotoSizesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhotoSizesAsync(String apiKey, String photoId, final ApiCallback<PublicGetPhotoSizesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhotoSizesValidateBeforeCall(apiKey, photoId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetPhotoSizesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPhotoSizesRequestBuilder {
        private final String apiKey;
        private final String photoId;

        private GetPhotoSizesRequestBuilder(String apiKey, String photoId) {
            this.apiKey = apiKey;
            this.photoId = photoId;
        }

        /**
         * Build call for getPhotoSizes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Photo sizes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhotoSizesCall(apiKey, photoId, _callback);
        }


        /**
         * Execute getPhotoSizes request
         * @return PublicGetPhotoSizesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Photo sizes </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetPhotoSizesResponse execute() throws ApiException {
            ApiResponse<PublicGetPhotoSizesResponse> localVarResp = getPhotoSizesWithHttpInfo(apiKey, photoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPhotoSizes request with HTTP info returned
         * @return ApiResponse&lt;PublicGetPhotoSizesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Photo sizes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetPhotoSizesResponse> executeWithHttpInfo() throws ApiException {
            return getPhotoSizesWithHttpInfo(apiKey, photoId);
        }

        /**
         * Execute getPhotoSizes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Photo sizes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetPhotoSizesResponse> _callback) throws ApiException {
            return getPhotoSizesAsync(apiKey, photoId, _callback);
        }
    }

    /**
     * 
     * Returns photo sizes
     * @param apiKey  (required)
     * @param photoId  (required)
     * @return GetPhotoSizesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Photo sizes </td><td>  -  </td></tr>
     </table>
     */
    public GetPhotoSizesRequestBuilder getPhotoSizes(String apiKey, String photoId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photoId == null) throw new IllegalArgumentException("\"photoId\" is required but got null");
            

        return new GetPhotoSizesRequestBuilder(apiKey, photoId);
    }
    private okhttp3.Call getPhotostreamContextCall(String apiKey, String photoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photos.getContext";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (photoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo_id", photoId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhotostreamContextValidateBeforeCall(String apiKey, String photoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getPhotostreamContext(Async)");
        }

        // verify the required parameter 'photoId' is set
        if (photoId == null) {
            throw new ApiException("Missing the required parameter 'photoId' when calling getPhotostreamContext(Async)");
        }

        return getPhotostreamContextCall(apiKey, photoId, _callback);

    }


    private ApiResponse<PublicGetPhotostreamContextResponse> getPhotostreamContextWithHttpInfo(String apiKey, String photoId) throws ApiException {
        okhttp3.Call localVarCall = getPhotostreamContextValidateBeforeCall(apiKey, photoId, null);
        Type localVarReturnType = new TypeToken<PublicGetPhotostreamContextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhotostreamContextAsync(String apiKey, String photoId, final ApiCallback<PublicGetPhotostreamContextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhotostreamContextValidateBeforeCall(apiKey, photoId, _callback);
        Type localVarReturnType = new TypeToken<PublicGetPhotostreamContextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPhotostreamContextRequestBuilder {
        private final String apiKey;
        private final String photoId;

        private GetPhotostreamContextRequestBuilder(String apiKey, String photoId) {
            this.apiKey = apiKey;
            this.photoId = photoId;
        }

        /**
         * Build call for getPhotostreamContext
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhotostreamContextCall(apiKey, photoId, _callback);
        }


        /**
         * Execute getPhotostreamContext request
         * @return PublicGetPhotostreamContextResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetPhotostreamContextResponse execute() throws ApiException {
            ApiResponse<PublicGetPhotostreamContextResponse> localVarResp = getPhotostreamContextWithHttpInfo(apiKey, photoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPhotostreamContext request with HTTP info returned
         * @return ApiResponse&lt;PublicGetPhotostreamContextResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetPhotostreamContextResponse> executeWithHttpInfo() throws ApiException {
            return getPhotostreamContextWithHttpInfo(apiKey, photoId);
        }

        /**
         * Execute getPhotostreamContext request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetPhotostreamContextResponse> _callback) throws ApiException {
            return getPhotostreamContextAsync(apiKey, photoId, _callback);
        }
    }

    /**
     * 
     * Returns next and previous photos for a photo in a photostream
     * @param apiKey  (required)
     * @param photoId  (required)
     * @return GetPhotostreamContextRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPhotostreamContextRequestBuilder getPhotostreamContext(String apiKey, String photoId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photoId == null) throw new IllegalArgumentException("\"photoId\" is required but got null");
            

        return new GetPhotostreamContextRequestBuilder(apiKey, photoId);
    }
    private okhttp3.Call getUserAlbumsCall(String apiKey, String userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photosets.getList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAlbumsValidateBeforeCall(String apiKey, String userId, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserAlbums(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserAlbums(Async)");
        }

        return getUserAlbumsCall(apiKey, userId, page, perPage, _callback);

    }


    private ApiResponse<PublicGetUserAlbumsResponse> getUserAlbumsWithHttpInfo(String apiKey, String userId, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getUserAlbumsValidateBeforeCall(apiKey, userId, page, perPage, null);
        Type localVarReturnType = new TypeToken<PublicGetUserAlbumsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserAlbumsAsync(String apiKey, String userId, Double page, Double perPage, final ApiCallback<PublicGetUserAlbumsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAlbumsValidateBeforeCall(apiKey, userId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PublicGetUserAlbumsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserAlbumsRequestBuilder {
        private final String apiKey;
        private final String userId;
        private Double page;
        private Double perPage;

        private GetUserAlbumsRequestBuilder(String apiKey, String userId) {
            this.apiKey = apiKey;
            this.userId = userId;
        }

        /**
         * Set page
         * @param page  (optional)
         * @return GetUserAlbumsRequestBuilder
         */
        public GetUserAlbumsRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetUserAlbumsRequestBuilder
         */
        public GetUserAlbumsRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getUserAlbums
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserAlbumsCall(apiKey, userId, page, perPage, _callback);
        }


        /**
         * Execute getUserAlbums request
         * @return PublicGetUserAlbumsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetUserAlbumsResponse execute() throws ApiException {
            ApiResponse<PublicGetUserAlbumsResponse> localVarResp = getUserAlbumsWithHttpInfo(apiKey, userId, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserAlbums request with HTTP info returned
         * @return ApiResponse&lt;PublicGetUserAlbumsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetUserAlbumsResponse> executeWithHttpInfo() throws ApiException {
            return getUserAlbumsWithHttpInfo(apiKey, userId, page, perPage);
        }

        /**
         * Execute getUserAlbums request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetUserAlbumsResponse> _callback) throws ApiException {
            return getUserAlbumsAsync(apiKey, userId, page, perPage, _callback);
        }
    }

    /**
     * 
     * Returns the albums belonging to the specified user
     * @param apiKey  (required)
     * @param userId  (required)
     * @return GetUserAlbumsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetUserAlbumsRequestBuilder getUserAlbums(String apiKey, String userId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserAlbumsRequestBuilder(apiKey, userId);
    }
    private okhttp3.Call getUserPhotosCall(String apiKey, String userId, Double safeSearch, Double minUploadDate, Double maxUploadDate, Double minTakenDate, Double maxTakenDate, Double contentType, Double privacyFilter, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.people.getPhotos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (safeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe_search", safeSearch));
        }

        if (minUploadDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_upload_date", minUploadDate));
        }

        if (maxUploadDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_upload_date", maxUploadDate));
        }

        if (minTakenDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_taken_date", minTakenDate));
        }

        if (maxTakenDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_taken_date", maxTakenDate));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type", contentType));
        }

        if (privacyFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privacy_filter", privacyFilter));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserPhotosValidateBeforeCall(String apiKey, String userId, Double safeSearch, Double minUploadDate, Double maxUploadDate, Double minTakenDate, Double maxTakenDate, Double contentType, Double privacyFilter, Double page, Double perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserPhotos(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserPhotos(Async)");
        }

        return getUserPhotosCall(apiKey, userId, safeSearch, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, contentType, privacyFilter, page, perPage, _callback);

    }


    private ApiResponse<PublicGetUserPhotosResponse> getUserPhotosWithHttpInfo(String apiKey, String userId, Double safeSearch, Double minUploadDate, Double maxUploadDate, Double minTakenDate, Double maxTakenDate, Double contentType, Double privacyFilter, Double page, Double perPage) throws ApiException {
        okhttp3.Call localVarCall = getUserPhotosValidateBeforeCall(apiKey, userId, safeSearch, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, contentType, privacyFilter, page, perPage, null);
        Type localVarReturnType = new TypeToken<PublicGetUserPhotosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserPhotosAsync(String apiKey, String userId, Double safeSearch, Double minUploadDate, Double maxUploadDate, Double minTakenDate, Double maxTakenDate, Double contentType, Double privacyFilter, Double page, Double perPage, final ApiCallback<PublicGetUserPhotosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserPhotosValidateBeforeCall(apiKey, userId, safeSearch, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, contentType, privacyFilter, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PublicGetUserPhotosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserPhotosRequestBuilder {
        private final String apiKey;
        private final String userId;
        private Double safeSearch;
        private Double minUploadDate;
        private Double maxUploadDate;
        private Double minTakenDate;
        private Double maxTakenDate;
        private Double contentType;
        private Double privacyFilter;
        private Double page;
        private Double perPage;

        private GetUserPhotosRequestBuilder(String apiKey, String userId) {
            this.apiKey = apiKey;
            this.userId = userId;
        }

        /**
         * Set safeSearch
         * @param safeSearch  (optional)
         * @return GetUserPhotosRequestBuilder
         */
        public GetUserPhotosRequestBuilder safeSearch(Double safeSearch) {
            this.safeSearch = safeSearch;
            return this;
        }
        
        /**
         * Set minUploadDate
         * @param minUploadDate  (optional)
         * @return GetUserPhotosRequestBuilder
         */
        public GetUserPhotosRequestBuilder minUploadDate(Double minUploadDate) {
            this.minUploadDate = minUploadDate;
            return this;
        }
        
        /**
         * Set maxUploadDate
         * @param maxUploadDate  (optional)
         * @return GetUserPhotosRequestBuilder
         */
        public GetUserPhotosRequestBuilder maxUploadDate(Double maxUploadDate) {
            this.maxUploadDate = maxUploadDate;
            return this;
        }
        
        /**
         * Set minTakenDate
         * @param minTakenDate  (optional)
         * @return GetUserPhotosRequestBuilder
         */
        public GetUserPhotosRequestBuilder minTakenDate(Double minTakenDate) {
            this.minTakenDate = minTakenDate;
            return this;
        }
        
        /**
         * Set maxTakenDate
         * @param maxTakenDate  (optional)
         * @return GetUserPhotosRequestBuilder
         */
        public GetUserPhotosRequestBuilder maxTakenDate(Double maxTakenDate) {
            this.maxTakenDate = maxTakenDate;
            return this;
        }
        
        /**
         * Set contentType
         * @param contentType  (optional)
         * @return GetUserPhotosRequestBuilder
         */
        public GetUserPhotosRequestBuilder contentType(Double contentType) {
            this.contentType = contentType;
            return this;
        }
        
        /**
         * Set privacyFilter
         * @param privacyFilter  (optional)
         * @return GetUserPhotosRequestBuilder
         */
        public GetUserPhotosRequestBuilder privacyFilter(Double privacyFilter) {
            this.privacyFilter = privacyFilter;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetUserPhotosRequestBuilder
         */
        public GetUserPhotosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetUserPhotosRequestBuilder
         */
        public GetUserPhotosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getUserPhotos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserPhotosCall(apiKey, userId, safeSearch, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, contentType, privacyFilter, page, perPage, _callback);
        }


        /**
         * Execute getUserPhotos request
         * @return PublicGetUserPhotosResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicGetUserPhotosResponse execute() throws ApiException {
            ApiResponse<PublicGetUserPhotosResponse> localVarResp = getUserPhotosWithHttpInfo(apiKey, userId, safeSearch, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, contentType, privacyFilter, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserPhotos request with HTTP info returned
         * @return ApiResponse&lt;PublicGetUserPhotosResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicGetUserPhotosResponse> executeWithHttpInfo() throws ApiException {
            return getUserPhotosWithHttpInfo(apiKey, userId, safeSearch, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, contentType, privacyFilter, page, perPage);
        }

        /**
         * Execute getUserPhotos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicGetUserPhotosResponse> _callback) throws ApiException {
            return getUserPhotosAsync(apiKey, userId, safeSearch, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, contentType, privacyFilter, page, perPage, _callback);
        }
    }

    /**
     * 
     * Return photos from the given user&#39;s photostream
     * @param apiKey  (required)
     * @param userId  (required)
     * @return GetUserPhotosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetUserPhotosRequestBuilder getUserPhotos(String apiKey, String userId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new GetUserPhotosRequestBuilder(apiKey, userId);
    }
    private okhttp3.Call searchPhotosCall(String apiKey, String text, String tags, String userId, String minUploadDate, String maxUploadDate, String minTakenDate, String maxTakenDate, String license, String sort, Double privacyFilter, String bbox, String accuracy, Double safeSearch, Double contentType, String machineTags, String machineTagMode, String groupId, String contacts, String woeId, String placeId, String media, String hasGeo, String geoContext, String lat, String lon, Double radius, String radiusUnits, Boolean isCommons, Boolean inGallery, Boolean isGetty, Double perPage, Double page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest?method=flickr.photos.search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api_key", apiKey));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (minUploadDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_upload_date", minUploadDate));
        }

        if (maxUploadDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_upload_date", maxUploadDate));
        }

        if (minTakenDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_taken_date", minTakenDate));
        }

        if (maxTakenDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_taken_date", maxTakenDate));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (privacyFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privacy_filter", privacyFilter));
        }

        if (bbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bbox", bbox));
        }

        if (accuracy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accuracy", accuracy));
        }

        if (safeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe_search", safeSearch));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("content_type", contentType));
        }

        if (machineTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("machine_tags", machineTags));
        }

        if (machineTagMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("machine_tag_mode", machineTagMode));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (contacts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contacts", contacts));
        }

        if (woeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("woe_id", woeId));
        }

        if (placeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("place_id", placeId));
        }

        if (media != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media", media));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (geoContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geo_context", geoContext));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (radiusUnits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius_units", radiusUnits));
        }

        if (isCommons != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_commons", isCommons));
        }

        if (inGallery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in_gallery", inGallery));
        }

        if (isGetty != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_getty", isGetty));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPhotosValidateBeforeCall(String apiKey, String text, String tags, String userId, String minUploadDate, String maxUploadDate, String minTakenDate, String maxTakenDate, String license, String sort, Double privacyFilter, String bbox, String accuracy, Double safeSearch, Double contentType, String machineTags, String machineTagMode, String groupId, String contacts, String woeId, String placeId, String media, String hasGeo, String geoContext, String lat, String lon, Double radius, String radiusUnits, Boolean isCommons, Boolean inGallery, Boolean isGetty, Double perPage, Double page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling searchPhotos(Async)");
        }

        return searchPhotosCall(apiKey, text, tags, userId, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, license, sort, privacyFilter, bbox, accuracy, safeSearch, contentType, machineTags, machineTagMode, groupId, contacts, woeId, placeId, media, hasGeo, geoContext, lat, lon, radius, radiusUnits, isCommons, inGallery, isGetty, perPage, page, _callback);

    }


    private ApiResponse<PublicSearchPhotosResponse> searchPhotosWithHttpInfo(String apiKey, String text, String tags, String userId, String minUploadDate, String maxUploadDate, String minTakenDate, String maxTakenDate, String license, String sort, Double privacyFilter, String bbox, String accuracy, Double safeSearch, Double contentType, String machineTags, String machineTagMode, String groupId, String contacts, String woeId, String placeId, String media, String hasGeo, String geoContext, String lat, String lon, Double radius, String radiusUnits, Boolean isCommons, Boolean inGallery, Boolean isGetty, Double perPage, Double page) throws ApiException {
        okhttp3.Call localVarCall = searchPhotosValidateBeforeCall(apiKey, text, tags, userId, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, license, sort, privacyFilter, bbox, accuracy, safeSearch, contentType, machineTags, machineTagMode, groupId, contacts, woeId, placeId, media, hasGeo, geoContext, lat, lon, radius, radiusUnits, isCommons, inGallery, isGetty, perPage, page, null);
        Type localVarReturnType = new TypeToken<PublicSearchPhotosResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchPhotosAsync(String apiKey, String text, String tags, String userId, String minUploadDate, String maxUploadDate, String minTakenDate, String maxTakenDate, String license, String sort, Double privacyFilter, String bbox, String accuracy, Double safeSearch, Double contentType, String machineTags, String machineTagMode, String groupId, String contacts, String woeId, String placeId, String media, String hasGeo, String geoContext, String lat, String lon, Double radius, String radiusUnits, Boolean isCommons, Boolean inGallery, Boolean isGetty, Double perPage, Double page, final ApiCallback<PublicSearchPhotosResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPhotosValidateBeforeCall(apiKey, text, tags, userId, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, license, sort, privacyFilter, bbox, accuracy, safeSearch, contentType, machineTags, machineTagMode, groupId, contacts, woeId, placeId, media, hasGeo, geoContext, lat, lon, radius, radiusUnits, isCommons, inGallery, isGetty, perPage, page, _callback);
        Type localVarReturnType = new TypeToken<PublicSearchPhotosResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchPhotosRequestBuilder {
        private final String apiKey;
        private String text;
        private String tags;
        private String userId;
        private String minUploadDate;
        private String maxUploadDate;
        private String minTakenDate;
        private String maxTakenDate;
        private String license;
        private String sort;
        private Double privacyFilter;
        private String bbox;
        private String accuracy;
        private Double safeSearch;
        private Double contentType;
        private String machineTags;
        private String machineTagMode;
        private String groupId;
        private String contacts;
        private String woeId;
        private String placeId;
        private String media;
        private String hasGeo;
        private String geoContext;
        private String lat;
        private String lon;
        private Double radius;
        private String radiusUnits;
        private Boolean isCommons;
        private Boolean inGallery;
        private Boolean isGetty;
        private Double perPage;
        private Double page;

        private SearchPhotosRequestBuilder(String apiKey) {
            this.apiKey = apiKey;
        }

        /**
         * Set text
         * @param text A free text search. Photos who&#39;s title, description or tags contain the text will be returned. You can exclude results that match a term by prepending it with a - character. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder text(String text) {
            this.text = text;
            return this;
        }
        
        /**
         * Set tags
         * @param tags A comma-delimited list of tags. Photos with one or more of the tags listed will be returned. You can exclude results that match a term by prepending it with a - character. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder tags(String tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set userId
         * @param userId The NSID of the user who&#39;s photo to search. If this parameter isn&#39;t passed then everybody&#39;s public photos will be searched. A value of \&quot;me\&quot; will search against the calling user&#39;s photos for authenticated calls. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder userId(String userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set minUploadDate
         * @param minUploadDate Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder minUploadDate(String minUploadDate) {
            this.minUploadDate = minUploadDate;
            return this;
        }
        
        /**
         * Set maxUploadDate
         * @param maxUploadDate Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder maxUploadDate(String maxUploadDate) {
            this.maxUploadDate = maxUploadDate;
            return this;
        }
        
        /**
         * Set minTakenDate
         * @param minTakenDate Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder minTakenDate(String minTakenDate) {
            this.minTakenDate = minTakenDate;
            return this;
        }
        
        /**
         * Set maxTakenDate
         * @param maxTakenDate Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder maxTakenDate(String maxTakenDate) {
            this.maxTakenDate = maxTakenDate;
            return this;
        }
        
        /**
         * Set license
         * @param license The license id for photos (for possible values see the flickr.photos.licenses.getInfo method). Multiple licenses may be comma-separated. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder license(String license) {
            this.license = license;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The order in which to sort returned photos. Deafults to date-posted-desc (unless you are doing a radial geo query, in which case the default sorting is by ascending distance from the point specified). The possible values are:   date-posted-asc,   date-posted-desc,   date-taken-asc,   date-taken-desc,   interestingness-desc,   interestingness-asc, and   relevance.  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set privacyFilter
         * @param privacyFilter Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are:,   1: public photos,   2: private photos visible to friends,   3: private photos visible to family,   4: private photos visible to friends &amp; family,   5: completely private photos  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder privacyFilter(Double privacyFilter) {
            this.privacyFilter = privacyFilter;
            return this;
        }
        
        /**
         * Set bbox
         * @param bbox A comma-delimited list of 4 values defining the Bounding Box of the area that will be searched. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder bbox(String bbox) {
            this.bbox = bbox;
            return this;
        }
        
        /**
         * Set accuracy
         * @param accuracy Recorded accuracy level of the location information. Current range is 1-16:   World level is 1   Country is ~3   Region is ~6   City is ~11   Street is ~16  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder accuracy(String accuracy) {
            this.accuracy = accuracy;
            return this;
        }
        
        /**
         * Set safeSearch
         * @param safeSearch Safe search setting:   1: for safe,   2: for moderate,   3: for restricted  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder safeSearch(Double safeSearch) {
            this.safeSearch = safeSearch;
            return this;
        }
        
        /**
         * Set contentType
         * @param contentType Content Type setting:   1: photos only.   2: screenshots only.   3: &#39;other&#39; only.   4: photos and screenshots.   5: screenshots and &#39;other&#39;.   6: photos and &#39;other&#39;.   7: photos, screenshots, and &#39;other&#39; (all).  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder contentType(Double contentType) {
            this.contentType = contentType;
            return this;
        }
        
        /**
         * Set machineTags
         * @param machineTags Aside from passing in a fully formed machine tag, there is a special syntax for searching on specific properties : Find photos using the &#39;dc&#39; namespace : \&quot;machine_tags\&quot; &#x3D;&gt; \&quot;dc:\&quot; Find photos with a title in the &#39;dc&#39; namespace : \&quot;machine_tags\&quot; &#x3D;&gt; \&quot;dc:title&#x3D;\&quot; Find photos titled \&quot;mr. camera\&quot; in the &#39;dc&#39; namespace : \&quot;machine_tags\&quot; &#x3D;&gt; \&quot;dc:title&#x3D;\\\&quot;mr. camera\\\&quot; Find photos whose value is \&quot;mr. camera\&quot; : \&quot;machine_tags\&quot; &#x3D;&gt; \&quot;*:*&#x3D;\\\&quot;mr. camera\\\&quot;\&quot; Find photos that have a title, in any namespace : \&quot;machine_tags\&quot; &#x3D;&gt; \&quot;*:title&#x3D;\&quot; Find photos that have a title, in any namespace, whose value is \&quot;mr. camera\&quot; : \&quot;machine_tags\&quot; &#x3D;&gt; \&quot;*:title&#x3D;\\\&quot;mr. camera\\\&quot;\&quot; Find photos, in the &#39;dc&#39; namespace whose value is \&quot;mr. camera\&quot; : \&quot;machine_tags\&quot; &#x3D;&gt; \&quot;dc:*&#x3D;\\\&quot;mr. camera\\\&quot;\&quot; Multiple machine tags may be queried by passing a comma-separated list. The number of machine tags you can pass in a single query depends on the tag mode (AND or OR) that you are querying with. \&quot;AND\&quot; queries are limited to (16) machine tags. \&quot;OR\&quot; queries are limited to (8).  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder machineTags(String machineTags) {
            this.machineTags = machineTags;
            return this;
        }
        
        /**
         * Set machineTagMode
         * @param machineTagMode Either &#39;any&#39; for an OR combination of tags, or &#39;all&#39; for an AND combination. Defaults to &#39;any&#39; if not specified. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder machineTagMode(String machineTagMode) {
            this.machineTagMode = machineTagMode;
            return this;
        }
        
        /**
         * Set groupId
         * @param groupId The id of a group who&#39;s pool to search. If specified, only matching photos posted to the group&#39;s pool will be returned. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder groupId(String groupId) {
            this.groupId = groupId;
            return this;
        }
        
        /**
         * Set contacts
         * @param contacts Search your contacts. Either &#39;all&#39; or &#39;ff&#39; for just friends and family. (Experimental) (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder contacts(String contacts) {
            this.contacts = contacts;
            return this;
        }
        
        /**
         * Set woeId
         * @param woeId A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present). (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder woeId(String woeId) {
            this.woeId = woeId;
            return this;
        }
        
        /**
         * Set placeId
         * @param placeId A Flickr place id. (not used if bbox argument is present). Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \&quot;parameterless searches\&quot; for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder placeId(String placeId) {
            this.placeId = placeId;
            return this;
        }
        
        /**
         * Set media
         * @param media Filter results by media type. Possible values are all (default), photos or videos (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder media(String media) {
            this.media = media;
            return this;
        }
        
        /**
         * Set hasGeo
         * @param hasGeo Any photo that has been geotagged, or if the value is \&quot;0\&quot; any photo that has not been geotagged. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \&quot;parameterless searches\&quot; for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder hasGeo(String hasGeo) {
            this.hasGeo = hasGeo;
            return this;
        }
        
        /**
         * Set geoContext
         * @param geoContext Geo context is a numeric value representing the photo&#39;s geotagginess beyond latitude and longitude. For example, you may wish to search for photos that were taken \&quot;indoors\&quot; or \&quot;outdoors\&quot;. The current list of context IDs is: 0, not defined. 1, indoors. 2, outdoors. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \&quot;parameterless searches\&quot; for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder geoContext(String geoContext) {
            this.geoContext = geoContext;
            return this;
        }
        
        /**
         * Set lat
         * @param lat A valid latitude, in decimal format, for doing radial geo queries. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \&quot;parameterless searches\&quot; for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder lat(String lat) {
            this.lat = lat;
            return this;
        }
        
        /**
         * Set lon
         * @param lon A valid longitude, in decimal format, for doing radial geo queries. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against \&quot;parameterless searches\&quot; for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).  (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder lon(String lon) {
            this.lon = lon;
            return this;
        }
        
        /**
         * Set radius
         * @param radius A valid radius used for geo queries, greater than zero and less than 20 miles (or 32 kilometers), for use with point-based geo queries. The default value is 5 (km). (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder radius(Double radius) {
            this.radius = radius;
            return this;
        }
        
        /**
         * Set radiusUnits
         * @param radiusUnits The unit of measure when doing radial geo queries. Valid options are \&quot;mi\&quot; (miles) and \&quot;km\&quot; (kilometers). The default is \&quot;km\&quot;. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder radiusUnits(String radiusUnits) {
            this.radiusUnits = radiusUnits;
            return this;
        }
        
        /**
         * Set isCommons
         * @param isCommons Limit the scope of the search to only photos that are part of the Flickr Commons project. Default is false. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder isCommons(Boolean isCommons) {
            this.isCommons = isCommons;
            return this;
        }
        
        /**
         * Set inGallery
         * @param inGallery Limit the scope of the search to only photos that are in a gallery? Default is false, search all photos. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder inGallery(Boolean inGallery) {
            this.inGallery = inGallery;
            return this;
        }
        
        /**
         * Set isGetty
         * @param isGetty Limit the scope of the search to only photos that are for sale on Getty. Default is false. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder isGetty(Boolean isGetty) {
            this.isGetty = isGetty;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder perPage(Double perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set page
         * @param page The page of results to return. If this argument is omitted, it defaults to 1. (optional)
         * @return SearchPhotosRequestBuilder
         */
        public SearchPhotosRequestBuilder page(Double page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for searchPhotos
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchPhotosCall(apiKey, text, tags, userId, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, license, sort, privacyFilter, bbox, accuracy, safeSearch, contentType, machineTags, machineTagMode, groupId, contacts, woeId, placeId, media, hasGeo, geoContext, lat, lon, radius, radiusUnits, isCommons, inGallery, isGetty, perPage, page, _callback);
        }


        /**
         * Execute searchPhotos request
         * @return PublicSearchPhotosResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PublicSearchPhotosResponse execute() throws ApiException {
            ApiResponse<PublicSearchPhotosResponse> localVarResp = searchPhotosWithHttpInfo(apiKey, text, tags, userId, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, license, sort, privacyFilter, bbox, accuracy, safeSearch, contentType, machineTags, machineTagMode, groupId, contacts, woeId, placeId, media, hasGeo, geoContext, lat, lon, radius, radiusUnits, isCommons, inGallery, isGetty, perPage, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchPhotos request with HTTP info returned
         * @return ApiResponse&lt;PublicSearchPhotosResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PublicSearchPhotosResponse> executeWithHttpInfo() throws ApiException {
            return searchPhotosWithHttpInfo(apiKey, text, tags, userId, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, license, sort, privacyFilter, bbox, accuracy, safeSearch, contentType, machineTags, machineTagMode, groupId, contacts, woeId, placeId, media, hasGeo, geoContext, lat, lon, radius, radiusUnits, isCommons, inGallery, isGetty, perPage, page);
        }

        /**
         * Execute searchPhotos request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PublicSearchPhotosResponse> _callback) throws ApiException {
            return searchPhotosAsync(apiKey, text, tags, userId, minUploadDate, maxUploadDate, minTakenDate, maxTakenDate, license, sort, privacyFilter, bbox, accuracy, safeSearch, contentType, machineTags, machineTagMode, groupId, contacts, woeId, placeId, media, hasGeo, geoContext, lat, lon, radius, radiusUnits, isCommons, inGallery, isGetty, perPage, page, _callback);
        }
    }

    /**
     * 
     * Return a list of photos matching some criteria.
     * @param apiKey  (required)
     * @return SearchPhotosRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SearchPhotosRequestBuilder searchPhotos(String apiKey) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        return new SearchPhotosRequestBuilder(apiKey);
    }
    private okhttp3.Call uploadPhotoCall(String apiKey, File photo, PublicUploadPhotoRequest publicUploadPhotoRequest, String tags, String title, String description, String contentType, String hidden, String isFamily, String isFriend, String isPublic, String safetyLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publicUploadPhotoRequest;

        // create path and map variables
        String localVarPath = "/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (apiKey != null) {
            localVarFormParams.put("api_key", apiKey);
        }

        if (contentType != null) {
            localVarFormParams.put("content_type", contentType);
        }

        if (hidden != null) {
            localVarFormParams.put("hidden", hidden);
        }

        if (isFamily != null) {
            localVarFormParams.put("is_family", isFamily);
        }

        if (isFriend != null) {
            localVarFormParams.put("is_friend", isFriend);
        }

        if (isPublic != null) {
            localVarFormParams.put("is_public", isPublic);
        }

        if (photo != null) {
            localVarFormParams.put("photo", photo);
        }

        if (safetyLevel != null) {
            localVarFormParams.put("safety_level", safetyLevel);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadPhotoValidateBeforeCall(String apiKey, File photo, PublicUploadPhotoRequest publicUploadPhotoRequest, String tags, String title, String description, String contentType, String hidden, String isFamily, String isFriend, String isPublic, String safetyLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling uploadPhoto(Async)");
        }

        // verify the required parameter 'photo' is set
        if (photo == null) {
            throw new ApiException("Missing the required parameter 'photo' when calling uploadPhoto(Async)");
        }

        // verify the required parameter 'publicUploadPhotoRequest' is set
        if (publicUploadPhotoRequest == null) {
            throw new ApiException("Missing the required parameter 'publicUploadPhotoRequest' when calling uploadPhoto(Async)");
        }

        return uploadPhotoCall(apiKey, photo, publicUploadPhotoRequest, tags, title, description, contentType, hidden, isFamily, isFriend, isPublic, safetyLevel, _callback);

    }


    private ApiResponse<Object> uploadPhotoWithHttpInfo(String apiKey, File photo, PublicUploadPhotoRequest publicUploadPhotoRequest, String tags, String title, String description, String contentType, String hidden, String isFamily, String isFriend, String isPublic, String safetyLevel) throws ApiException {
        okhttp3.Call localVarCall = uploadPhotoValidateBeforeCall(apiKey, photo, publicUploadPhotoRequest, tags, title, description, contentType, hidden, isFamily, isFriend, isPublic, safetyLevel, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadPhotoAsync(String apiKey, File photo, PublicUploadPhotoRequest publicUploadPhotoRequest, String tags, String title, String description, String contentType, String hidden, String isFamily, String isFriend, String isPublic, String safetyLevel, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadPhotoValidateBeforeCall(apiKey, photo, publicUploadPhotoRequest, tags, title, description, contentType, hidden, isFamily, isFriend, isPublic, safetyLevel, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadPhotoRequestBuilder {
        private final String apiKey;
        private final File photo;
        private String tags;
        private String title;
        private String description;
        private String contentType;
        private String hidden;
        private String isFamily;
        private String isFriend;
        private String isPublic;
        private String safetyLevel;

        private UploadPhotoRequestBuilder(String apiKey, File photo) {
            this.apiKey = apiKey;
            this.photo = photo;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return UploadPhotoRequestBuilder
         */
        public UploadPhotoRequestBuilder tags(String tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set title
         * @param title  (optional)
         * @return UploadPhotoRequestBuilder
         */
        public UploadPhotoRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set description
         * @param description  (optional)
         * @return UploadPhotoRequestBuilder
         */
        public UploadPhotoRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set contentType
         * @param contentType  (optional)
         * @return UploadPhotoRequestBuilder
         */
        public UploadPhotoRequestBuilder contentType(String contentType) {
            this.contentType = contentType;
            return this;
        }
        
        /**
         * Set hidden
         * @param hidden  (optional)
         * @return UploadPhotoRequestBuilder
         */
        public UploadPhotoRequestBuilder hidden(String hidden) {
            this.hidden = hidden;
            return this;
        }
        
        /**
         * Set isFamily
         * @param isFamily  (optional)
         * @return UploadPhotoRequestBuilder
         */
        public UploadPhotoRequestBuilder isFamily(String isFamily) {
            this.isFamily = isFamily;
            return this;
        }
        
        /**
         * Set isFriend
         * @param isFriend  (optional)
         * @return UploadPhotoRequestBuilder
         */
        public UploadPhotoRequestBuilder isFriend(String isFriend) {
            this.isFriend = isFriend;
            return this;
        }
        
        /**
         * Set isPublic
         * @param isPublic  (optional)
         * @return UploadPhotoRequestBuilder
         */
        public UploadPhotoRequestBuilder isPublic(String isPublic) {
            this.isPublic = isPublic;
            return this;
        }
        
        /**
         * Set safetyLevel
         * @param safetyLevel  (optional)
         * @return UploadPhotoRequestBuilder
         */
        public UploadPhotoRequestBuilder safetyLevel(String safetyLevel) {
            this.safetyLevel = safetyLevel;
            return this;
        }
        
        /**
         * Build call for uploadPhoto
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PublicUploadPhotoRequest publicUploadPhotoRequest = buildBodyParams();
            return uploadPhotoCall(apiKey, photo, publicUploadPhotoRequest, tags, title, description, contentType, hidden, isFamily, isFriend, isPublic, safetyLevel, _callback);
        }

        private PublicUploadPhotoRequest buildBodyParams() {
            PublicUploadPhotoRequest publicUploadPhotoRequest = new PublicUploadPhotoRequest();
            publicUploadPhotoRequest.tags(this.tags);
            publicUploadPhotoRequest.title(this.title);
            publicUploadPhotoRequest.description(this.description);
            publicUploadPhotoRequest.apiKey(this.apiKey);
            if (this.contentType != null)
            publicUploadPhotoRequest.contentType(PublicUploadPhotoRequest.ContentTypeEnum.fromValue(this.contentType));
            if (this.hidden != null)
            publicUploadPhotoRequest.hidden(PublicUploadPhotoRequest.HiddenEnum.fromValue(this.hidden));
            if (this.isFamily != null)
            publicUploadPhotoRequest.isFamily(PublicUploadPhotoRequest.IsFamilyEnum.fromValue(this.isFamily));
            if (this.isFriend != null)
            publicUploadPhotoRequest.isFriend(PublicUploadPhotoRequest.IsFriendEnum.fromValue(this.isFriend));
            if (this.isPublic != null)
            publicUploadPhotoRequest.isPublic(PublicUploadPhotoRequest.IsPublicEnum.fromValue(this.isPublic));
            publicUploadPhotoRequest.photo(this.photo);
            if (this.safetyLevel != null)
            publicUploadPhotoRequest.safetyLevel(PublicUploadPhotoRequest.SafetyLevelEnum.fromValue(this.safetyLevel));
            return publicUploadPhotoRequest;
        }

        /**
         * Execute uploadPhoto request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            PublicUploadPhotoRequest publicUploadPhotoRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = uploadPhotoWithHttpInfo(apiKey, photo, publicUploadPhotoRequest, tags, title, description, contentType, hidden, isFamily, isFriend, isPublic, safetyLevel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute uploadPhoto request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            PublicUploadPhotoRequest publicUploadPhotoRequest = buildBodyParams();
            return uploadPhotoWithHttpInfo(apiKey, photo, publicUploadPhotoRequest, tags, title, description, contentType, hidden, isFamily, isFriend, isPublic, safetyLevel);
        }

        /**
         * Execute uploadPhoto request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            PublicUploadPhotoRequest publicUploadPhotoRequest = buildBodyParams();
            return uploadPhotoAsync(apiKey, photo, publicUploadPhotoRequest, tags, title, description, contentType, hidden, isFamily, isFriend, isPublic, safetyLevel, _callback);
        }
    }

    /**
     * 
     * Uploads a new photo to Flickr
     * @param apiKey  (required)
     * @param photo  (required)
     * @param publicUploadPhotoRequest  (required)
     * @return UploadPhotoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UploadPhotoRequestBuilder uploadPhoto(String apiKey, File photo) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (photo == null) throw new IllegalArgumentException("\"photo\" is required but got null");
        return new UploadPhotoRequestBuilder(apiKey, photo);
    }
}
